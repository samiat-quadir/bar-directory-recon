{"dependencies": [{"name": "aiofiles", "version": "24.1.0", "vulns": []}, {"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.12.13", "vulns": [{"id": "GHSA-9548-qrrj-x5pj", "fix_versions": ["3.12.14"], "aliases": ["CVE-2025-53643"], "description": "### Summary The Python parser is vulnerable to a request smuggling vulnerability due to not parsing trailer sections of an HTTP request.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or AIOHTTP_NO_EXTENSIONS is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  ----  Patch: https://github.com/aio-libs/aiohttp/commit/e8d774f635dc6d1cd3174d0e38891da5de0e2b6a"}]}, {"name": "multidict", "version": "6.6.4", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}, {"name": "aiosignal", "version": "1.4.0", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.10.0", "vulns": []}, {"name": "arrow", "version": "1.3.0", "vulns": []}, {"name": "attrs", "version": "25.3.0", "vulns": []}, {"name": "bandit", "version": "1.7.5", "vulns": []}, {"name": "beautifulsoup4", "version": "4.13.4", "vulns": []}, {"name": "black", "version": "23.9.1", "vulns": [{"id": "PYSEC-2024-48", "fix_versions": ["24.3.0"], "aliases": ["CVE-2024-21503"], "description": "Versions of the package black before 24.3.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the lines_with_leading_tabs_expanded function in the strings.py file. An attacker could exploit this vulnerability by crafting a malicious input that causes a denial of service.\r\rExploiting this vulnerability is possible when running Black on untrusted input, or if you habitually put thousands of leading tab characters in your docstrings."}]}, {"name": "certifi", "version": "2024.12.14", "vulns": []}, {"name": "cffi", "version": "1.17.1", "vulns": []}, {"name": "cfgv", "version": "3.4.0", "vulns": []}, {"name": "chardet", "version": "5.2.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.1", "vulns": []}, {"name": "click", "version": "8.1.8", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "coverage", "version": "7.10.4", "vulns": []}, {"name": "cyclonedx-bom", "version": "7.0.0", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "distlib", "version": "0.4.0", "vulns": []}, {"name": "dnspython", "version": "2.7.0", "vulns": []}, {"name": "filelock", "version": "3.19.1", "vulns": []}, {"name": "flake8", "version": "6.1.0", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "pycodestyle", "version": "2.11.1", "vulns": []}, {"name": "pyflakes", "version": "3.1.0", "vulns": []}, {"name": "fqdn", "version": "1.5.1", "vulns": []}, {"name": "frozenlist", "version": "1.7.0", "vulns": []}, {"name": "gitdb", "version": "4.0.12", "vulns": []}, {"name": "smmap", "version": "5.0.2", "vulns": []}, {"name": "gitpython", "version": "3.1.45", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "identify", "version": "2.6.13", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "isoduration", "version": "20.11.0", "vulns": []}, {"name": "isort", "version": "5.12.0", "vulns": []}, {"name": "jinja2", "version": "3.1.5", "vulns": [{"id": "GHSA-cpwx-vrp4-4pq7", "fix_versions": ["3.1.6"], "aliases": ["CVE-2025-27516"], "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup."}]}, {"name": "jsonpointer", "version": "3.0.0", "vulns": []}, {"name": "jsonschema", "version": "4.25.1", "vulns": []}, {"name": "jsonschema-specifications", "version": "2025.4.1", "vulns": []}, {"name": "loguru", "version": "0.7.2", "vulns": []}, {"name": "lxml", "version": "5.4.0", "vulns": []}, {"name": "markdown-it-py", "version": "4.0.0", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "mypy", "version": "1.17.1", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "nodeenv", "version": "1.9.1", "vulns": []}, {"name": "numpy", "version": "2.2.3", "vulns": []}, {"name": "outcome", "version": "1.3.0.post0", "vulns": []}, {"name": "pandas", "version": "2.3.0", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "pbr", "version": "7.0.0", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "pre-commit", "version": "4.2.0", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "pycparser", "version": "2.22", "vulns": []}, {"name": "pydantic", "version": "2.10.6", "vulns": []}, {"name": "pydantic-core", "version": "2.27.2", "vulns": []}, {"name": "pygments", "version": "2.19.2", "vulns": []}, {"name": "pysocks", "version": "1.7.1", "vulns": []}, {"name": "pytest", "version": "8.4.1", "vulns": []}, {"name": "pytest-cov", "version": "6.0.0", "vulns": []}, {"name": "pytest-mock", "version": "3.11.1", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.0.1", "vulns": []}, {"name": "pytz", "version": "2025.2", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "referencing", "version": "0.36.2", "vulns": []}, {"name": "requests", "version": "2.32.3", "vulns": [{"id": "GHSA-9hjg-9r4m-mvj7", "fix_versions": ["2.32.4"], "aliases": ["CVE-2024-47081"], "description": "### Impact  Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.  ### Workarounds For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).  ### References https://github.com/psf/requests/pull/6965 https://seclists.org/fulldisclosure/2025/Jun/2"}]}, {"name": "urllib3", "version": "2.3.0", "vulns": [{"id": "GHSA-48p4-8xcf-vxj5", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50182"], "description": "urllib3 [supports](https://urllib3.readthedocs.io/en/2.4.0/reference/contrib/emscripten.html) being used in a Pyodide runtime utilizing the [JavaScript Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) or falling back on [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest). This means you can use Python libraries to make HTTP requests from your browser or Node.js. Additionally, urllib3 provides [a mechanism](https://urllib3.readthedocs.io/en/2.4.0/user-guide.html#retrying-requests) to control redirects.  However, the `retries` and `redirect` parameters are ignored with Pyodide; the runtime itself determines redirect behavior.   ## Affected usages  Any code which relies on urllib3 to control the number of redirects for an HTTP request in a Pyodide runtime.   ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects may remain vulnerable if a Pyodide runtime redirect mechanism is unsuitable.   ## Remediation  If you use urllib3 in Node.js, upgrade to a patched version of urllib3.  Unfortunately, browsers provide no suitable way which urllib3 can use: `XMLHttpRequest` provides no control over redirects, the Fetch API returns `opaqueredirect` responses lacking data when redirects are controlled manually. Expect default browser behavior for redirects."}, {"id": "GHSA-pq67-6m6q-mj2v", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50181"], "description": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:  ```python resp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False) print(resp.status) # 302 ```  However, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:  ```python import urllib3  http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above http = urllib3.PoolManager(retries=False)  # should return the first response  resp = http.request(\"GET\", \"https://httpbin.org/redirect/1\") ```  However, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.  ## Affected usages  Passing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.  By default, requests and botocore users are not affected.  ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.  ## Remediation  You can remediate this vulnerability with the following steps:   * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.  * Disable redirects at the `request()` level instead of the `PoolManager()` level."}]}, {"name": "rfc3339-validator", "version": "0.1.4", "vulns": []}, {"name": "rfc3987", "version": "1.3.8", "vulns": []}, {"name": "rich", "version": "14.1.0", "vulns": []}, {"name": "rpds-py", "version": "0.27.0", "vulns": []}, {"name": "schedule", "version": "1.2.2", "vulns": []}, {"name": "selenium", "version": "4.27.1", "vulns": []}, {"name": "trio", "version": "0.30.0", "vulns": []}, {"name": "trio-websocket", "version": "0.12.2", "vulns": []}, {"name": "typing-extensions", "version": "4.14.1", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "soupsieve", "version": "2.7", "vulns": []}, {"name": "stevedore", "version": "5.4.1", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "typer", "version": "0.15.2", "vulns": []}, {"name": "types-python-dateutil", "version": "2.9.0.20250809", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "uri-template", "version": "1.3.0", "vulns": []}, {"name": "virtualenv", "version": "20.34.0", "vulns": []}, {"name": "watchdog", "version": "6.0.0", "vulns": []}, {"name": "watchfiles", "version": "1.1.0", "vulns": []}, {"name": "webcolors", "version": "24.11.1", "vulns": []}, {"name": "win32-setctime", "version": "1.2.0", "vulns": []}, {"name": "wsproto", "version": "1.2.0", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "10.5.0", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "packageurl-python", "version": "0.17.5", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "rfc3986-validator", "version": "0.1.1", "vulns": []}, {"name": "rfc3987-syntax", "version": "1.1.0", "vulns": []}, {"name": "lark", "version": "1.2.2", "vulns": []}, {"name": "pyparsing", "version": "3.2.3", "vulns": []}], "fixes": []}
