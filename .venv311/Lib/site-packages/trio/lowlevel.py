"""
This namespace represents low-level functionality not intended for daily use,
but useful for extending Trio's functionality.
"""

# imports are renamed with leading underscores to indicate they are not part of the public API

import select as _select

# static checkers don't understand if importing this as _sys, so it's deleted later
import sys
import typing as _t

# Generally available symbols
from ._core import Abort as Abort
from ._core import ParkingLot as ParkingLot
from ._core import ParkingLotStatistics as ParkingLotStatistics
from ._core import RaiseCancelT as RaiseCancelT
from ._core import RunStatistics as RunStatistics
from ._core import RunVar as RunVar
from ._core import RunVarToken as RunVarToken
from ._core import Task as Task
from ._core import TrioToken as TrioToken
from ._core import UnboundedQueue as UnboundedQueue
from ._core import UnboundedQueueStatistics as UnboundedQueueStatistics
from ._core import add_instrument as add_instrument
from ._core import add_parking_lot_breaker as add_parking_lot_breaker
from ._core import cancel_shielded_checkpoint as cancel_shielded_checkpoint
from ._core import checkpoint as checkpoint
from ._core import checkpoint_if_cancelled as checkpoint_if_cancelled
from ._core import current_clock as current_clock
from ._core import current_root_task as current_root_task
from ._core import current_statistics as current_statistics
from ._core import current_task as current_task
from ._core import current_trio_token as current_trio_token
from ._core import currently_ki_protected as currently_ki_protected
from ._core import disable_ki_protection as disable_ki_protection
from ._core import enable_ki_protection as enable_ki_protection
from ._core import in_trio_run as in_trio_run
from ._core import in_trio_task as in_trio_task
from ._core import notify_closing as notify_closing
from ._core import permanently_detach_coroutine_object as permanently_detach_coroutine_object
from ._core import reattach_detached_coroutine_object as reattach_detached_coroutine_object
from ._core import remove_instrument as remove_instrument
from ._core import remove_parking_lot_breaker as remove_parking_lot_breaker
from ._core import reschedule as reschedule
from ._core import spawn_system_task as spawn_system_task
from ._core import start_guest_run as start_guest_run
from ._core import start_thread_soon as start_thread_soon
from ._core import temporarily_detach_coroutine_object as temporarily_detach_coroutine_object
from ._core import wait_readable as wait_readable
from ._core import wait_task_rescheduled as wait_task_rescheduled
from ._core import wait_writable as wait_writable
from ._subprocess import open_process as open_process

# This is the union of a subset of trio/_core/ and some things from trio/*.py.
# See comments in trio/__init__.py for details.

# Uses `from x import y as y` for compatibility with `pyright --verifytypes` (#2625)


if sys.platform == "win32":
    # Windows symbols
    from ._core import current_iocp as current_iocp
    from ._core import monitor_completion_key as monitor_completion_key
    from ._core import readinto_overlapped as readinto_overlapped
    from ._core import register_with_iocp as register_with_iocp
    from ._core import wait_overlapped as wait_overlapped
    from ._core import write_overlapped as write_overlapped
    from ._wait_for_object import WaitForSingleObject as WaitForSingleObject
else:
    # Unix symbols
    from ._unix_pipes import FdStream as FdStream

    # Kqueue-specific symbols
    if sys.platform != "linux" and (_t.TYPE_CHECKING or not hasattr(_select, "epoll")):
        from ._core import current_kqueue as current_kqueue
        from ._core import monitor_kevent as monitor_kevent
        from ._core import wait_kevent as wait_kevent

del sys
