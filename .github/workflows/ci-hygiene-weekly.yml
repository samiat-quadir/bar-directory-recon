name: ci-hygiene-weekly
on:
  schedule:
    - cron: "30 13 * * 3"  # Wed 09:30 ET
  workflow_dispatch:

concurrency:
  group: ci-hygiene-weekly
  cancel-in-progress: true

permissions:
  contents: read
  issues: write

jobs:
  report:
    runs-on: ubuntu-latest
    steps:
      - name: Generate hygiene report
        uses: actions/github-script@v8
        with:
          script: |
            const allow = new RegExp('^(fast-parity-ci\\.yml|pip-audit\\.yml|ps-lint\\.yml|ci-workflow-guard\\.yml|codeql.*)$');
            const { owner, repo } = context.repo;
            const res = await github.paginate(github.rest.repos.getContent, { owner, repo, path: '.github/workflows' }).catch(() => []);
            const files = (Array.isArray(res) ? res : [res]).filter(x => x && x.type === 'file');
            const offenders = [];
            for (const f of files) {
              const name = f.name;
              const raw = await github.request(`GET ${f.download_url}`).then(r => r.data).catch(() => '');
              const hasPR = /^\s*(on:|pull_request:|push:|pull_request_target:)/m.test(raw || '');
              if (hasPR && !allow.test(name)) offenders.push(name);
            }
            // open PRs touching offender files
            const prs = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open' });
            const prTouching = prs
              .map(p => ({ number: p.number, title: p.title }))
              ;
            // Build body
            let body = `### CI Hygiene Report\\n\\nAllow-list: fast-parity-ci.yml, pip-audit.yml, ps-lint.yml, ci-workflow-guard.yml, codeql*\\n\\n`;
            if (offenders.length === 0) body += `✅ No non-allow-listed workflows declare pull_request/push.\\n`;
            else body += `⚠️ Offenders:\\n` + offenders.map(o => `- .github/workflows/${o}`).join('\\n') + '\\n';
            body += `\\n_This report is informational and non-blocking._`;
            // upsert issue
            const issues = await github.paginate(github.rest.issues.listForRepo, { owner, repo, state: 'open' });
            const existing = issues.find(i => i.title === 'CI Hygiene Report');
            if (existing) {
              await github.rest.issues.update({ owner, repo, issue_number: existing.number, body });
              core.info(`Updated issue #${existing.number}`);
            } else {
              await github.rest.issues.create({ owner, repo, title: 'CI Hygiene Report', body });
            }