name: lock-refresh
# 09:30 ET (America/New_York) == 13:30 UTC (DST)
on:
    schedule:
        - cron: "30 13 * * 3"
    workflow_dispatch:

permissions:
    contents: write
    pull-requests: write

jobs:
    refresh:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with: { persist-credentials: true }
            - uses: actions/setup-python@v5
              with: { python-version: "3.11" }
            - name: Install pip-tools + pip-audit
              run: python -m pip install --upgrade pip pip-tools pip-audit
            - name: Prepare dated constraints and requirements.in
              id: prep
              env:
                  TZ: America/New_York
              run: |
                  set -e
                  DATE=$(date +%Y-%m-%d)
                  echo "DATE=$DATE" >> "$GITHUB_OUTPUT"
                  mkdir -p constraints
                  LATEST=$(ls -1 constraints/*.txt 2>/dev/null | sort | tail -n1 || true)
                  if [ -z "$LATEST" ]; then
                    echo "# constraints seed for $DATE" > "constraints/$DATE.txt"
                  else
                    cp "$LATEST" "constraints/$DATE.txt"
                  fi
                  if grep -qE '^-c constraints/.+\.txt' requirements.in 2>/dev/null; then
                    sed -i -E "s|^-c constraints/.+\.txt|-c constraints/${DATE}.txt|" requirements.in
                  else
                    printf -- "-c constraints/%s.txt\n.[dev]\n" "$DATE" > requirements.in
                  fi
            - name: Snapshot previous lock (if any)
              run: cp requirements-lock.txt /tmp/prev-lock.txt 2>/dev/null || true
            - name: Re-compile lockfile with hashes
              run: pip-compile requirements.in --generate-hashes --output-file requirements-lock.txt
            - name: Compute lock delta table (top 5)
              id: delta
              run: |
                  python - << 'PY'
                  import re, pathlib
                  prev = pathlib.Path('/tmp/prev-lock.txt'); new = pathlib.Path('requirements-lock.txt')
                  def pins(p):
                      d={}
                      if not p.exists(): return d
                      for ln in p.read_text(encoding='utf-8', errors='ignore').splitlines():
                          ln=ln.strip()
                          m=re.match(r'^([A-Za-z0-9_.\-]+)==([0-9A-Za-z_.\-]+)', ln)
                          if m: d[m.group(1).lower()]=m.group(2)
                      return d
                  old,newp = pins(prev),pins(new)
                  rows=[]
                  for pkg,ver in sorted(newp.items()):
                      o=old.get(pkg)
                      if o and o!=ver: rows.append((pkg,o,ver))
                      elif not o: rows.append((pkg,'—',ver))
                  rows=rows[:5]
                  print("## Lock delta (top 5)\n")
                  print("| package | was | now |\n|---|---:|---:|")
                  for pkg,a,b in rows: print(f"| {pkg} | {a} | {b} |")
                  PY
                  echo "TABLE<<EOF" >> $GITHUB_OUTPUT
                  python - << 'PY'
                  import re, pathlib
                  prev = pathlib.Path('/tmp/prev-lock.txt'); new = pathlib.Path('requirements-lock.txt')
                  def pins(p):
                      d={}
                      if not p.exists(): return d
                      for ln in p.read_text(encoding='utf-8', errors='ignore').splitlines():
                          ln=ln.strip()
                          m=re.match(r'^([A-Za-z0-9_.\-]+)==([0-9A-Za-z_.\-]+)', ln)
                          if m: d[m.group(1).lower()]=m.group(2)
                      return d
                  old,newp = pins(prev),pins(new)
                  rows=[]
                  for pkg,ver in sorted(newp.items()):
                      o=old.get(pkg)
                      if o and o!=ver: rows.append((pkg,o,ver))
                      elif not o: rows.append((pkg,'—',ver))
                  rows=rows[:5]
                  print("## Lock delta (top 5)\\n")
                  print("| package | was | now |\\n|---|---:|---:|")
                  for pkg,a,b in rows: print(f"| {pkg} | {a} | {b} |")
                  PY
                  echo "EOF" >> $GITHUB_OUTPUT
            - name: pip-audit summary on refreshed lock
              id: audit
              run: |
                  set -e
                  OUT=$(pip-audit -r requirements-lock.txt || true)
                  HIGH=$(printf "%s" "$OUT" | grep -E "HIGH" | wc -l | tr -d ' ')
                  CRIT=$(printf "%s" "$OUT" | grep -E "CRITICAL" | wc -l | tr -d ' ')
                  echo "high=$HIGH" >> $GITHUB_OUTPUT
                  echo "critical=$CRIT" >> $GITHUB_OUTPUT
            - name: Create PR with changes
              uses: peter-evans/create-pull-request@v6
              with:
                  commit-message: "chore(sec): weekly constraints copy + lock refresh (${{ steps.prep.outputs.DATE }})"
                  branch: "chore/lock-refresh-${{ steps.prep.outputs.DATE }}"
                  title: "chore(sec): weekly lock refresh (${{ steps.prep.outputs.DATE }})"
                  body: |
                      Automated weekly constraints copy and lock recompile.

                      ${{ steps.delta.outputs.TABLE }}

                      **pip-audit (refreshed lock) summary:** high=${{ steps.audit.outputs.high }}, critical=${{ steps.audit.outputs.critical }}
                  draft: true
