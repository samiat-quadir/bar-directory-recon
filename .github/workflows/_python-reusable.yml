name: Python Reusable Workflow

on:
  workflow_call:
    inputs:
      os:
        description: 'Operating system to run on'
        required: true
        type: string
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.11'
      diag:
        description: 'Enable diagnostics mode'
        required: false
        type: boolean
        default: false
      run-precommit:
        description: 'Run pre-commit hooks'
        required: false
        type: boolean
        default: true
      run-fast-tests:
        description: 'Run fast test suite'
        required: false
        type: boolean
        default: true
      precommit-soft-fail:
        description: 'Convert pre-commit failures to warnings (do not fail job)'
        required: false
        type: boolean
        default: false

jobs:
  python-workflow:
    runs-on: ${{ inputs.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Diagnostics (if enabled)
        if: ${{ inputs.diag }}
        shell: bash
        run: |
          echo "=== DIAGNOSTIC INFO ==="
          python --version || true
          pip --version || true
          echo "OS: ${{ runner.os }}"
          echo "Python path: $(command -v python || where python || echo 'not found')"
          echo "Pip cache dir: $(pip cache dir 2>/dev/null || echo 'n/a')"

      - name: Install dependencies
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          if [ -f requirements-lock.txt ]; then
            pip install -r requirements-lock.txt
          elif [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Ensure tools present for hooks/tests
          pip install pre-commit pytest || true
          # Editable install if project metadata exists
          if [ -f pyproject.toml ] || [ -f setup.cfg ]; then
            pip install -e . || true
          fi

      - name: Run pre-commit
        if: ${{ inputs.run-precommit }}
        shell: bash
        env:
          PRECOMMIT_SOFT_FAIL: "${{ inputs.precommit-soft-fail }}"
        run: |
          set -o pipefail
          pre-commit clean || true
          pre-commit install --install-hooks --hook-type pre-commit || true
          if [ "$PRECOMMIT_SOFT_FAIL" = "true" ]; then
            if ! pre-commit run --all-files; then
              echo "::warning ::pre-commit reported issues (soft-fail enabled)"
            fi
          else
            pre-commit run --all-files
          fi

      - name: Run fast tests
        if: ${{ inputs.run-fast-tests }}
        shell: bash
        run: |
          set -e
          python -m pytest -v -m "not slow and not e2e and not integration" --tb=short
