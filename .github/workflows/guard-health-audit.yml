name: guard-health-audit
on:
  schedule:
    # Daily for one week (09:30 ET), then weekly; we keep daily for this initial week
    - cron: "30 13 * * 1-5"
  workflow_dispatch:
permissions:
  contents: read
  issues: write
jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Verify branch protection (4 required checks)
        id: bp
        uses: actions/github-script@v8
        with:
          script: |
            const {owner,repo} = context.repo;
            const res = await github.request('GET /repos/{owner}/{repo}/branches/{branch}/protection', { owner, repo, branch: 'main' });
            const checks = (res.data.required_status_checks && res.data.required_status_checks.checks) ? res.data.required_status_checks.checks.map(c=>c.context) : [];
            const required = ["audit","fast-tests (ubuntu-latest)","fast-tests (windows-latest)","workflow-guard"];
            const ok = required.every(n => checks.includes(n)) && checks.length===4;
            core.setOutput('ok', String(ok));
            core.setOutput('checks', checks.join(', '));
      - name: Verify job name exactness (diagnostic)
        id: names
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const commits = await github.request('GET /repos/{owner}/{repo}/commits', { owner, repo, per_page: 1 });
            const sha = commits.data[0].sha;
            const runs = await github.request('GET /repos/{owner}/{repo}/commits/{ref}/check-runs', { owner, repo, ref: sha });
            const names = runs.data.check_runs.map(r => r.name);
            const required = ["audit","fast-tests (ubuntu-latest)","fast-tests (windows-latest)","workflow-guard"];
            const missing = required.filter(n => !names.includes(n));
            core.setOutput('missing', missing.join(','));
      - name: Upsert Guard Health Report
        if: always()
        uses: actions/github-script@v8
        with:
          script: |
            const ok = "${{ steps.bp.outputs.ok }}" === "true";
            const checks = "${{ steps.bp.outputs.checks }}";
            const missing = "${{ steps.names.outputs.missing }}";
            let body = `### Guard Health Report\n\n` +
                       `branch protection has 4 checks: ${ok ? "YES" : "NO"}\n` +
                       `checks: ${checks || "(none)"}\n` +
                       (missing ? `missing on latest main: ${missing}\n` : ``) +
                       `\n_Non-blocking; for governance only._`;
            const {owner, repo} = context.repo;
            const issues = await github.paginate(github.rest.issues.listForRepo, { owner, repo, state: 'open' });
            const existing = issues.find(i => i.title === 'Guard Health Report');
            if (existing) await github.rest.issues.update({ owner, repo, issue_number: existing.number, body });
            else await github.rest.issues.create({ owner, repo, title: 'Guard Health Report', body });
      - name: Mention on failure
        if: ${{ steps.bp.outputs.ok != 'true' }}
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const issues = await github.paginate(github.rest.issues.listForRepo, { owner, repo, state: 'open' });
            const target = issues.find(i => i.title === 'Guard Health Report');
            const ping = '@samiat-quadir';
            const note = 'Guard Health check failed â€” branch protection or names drifted.';
            if (target) {
              await github.rest.issues.createComment({ owner, repo, issue_number: target.number, body: ${ping} ${note} });
            } else {
              await github.rest.issues.create({ owner, repo, title: 'Guard Health Report', body: ${ping} ${note} });
            }