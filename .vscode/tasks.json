{
    "python.pythonPath": ".venv/Scripts/python.exe",
    "python.defaultInterpreterPath": "C:\\Program Files\\Python313\\python.exe",
    "terminal.integrated.defaultProfile.windows": "Command Prompt",
    "terminal.integrated.enablePersistentSessions": true,
    "terminal.integrated.env.windows": {},
    "terminal.explorerKind": "both",
    "terminal.integrated.accessibleViewFocusOnCommandExecution": true,
    "terminal.integrated.accessibleViewPreserveCursorPosition": true,
    "editor.formatOnSave": true,
    "files.autoSave": "onFocusChange",
    "chat.agent.enabled": true,
    "chat.mcp.discovery.enabled": true,
    "github.copilot.chat.agent.thinkingTool": true,
    "github.copilot.chat.agent.terminal.autoExecute": true,
    "github.copilot.chat.completionContext.typescript.mode": "on",
    "github.copilot.chat.followUps": "always",
    "github.copilot.chat.codesearch.enabled": true,
    "github.copilot.chat.editor.temporalContext.enabled": true,
    "github.copilot.chat.edits.temporalContext.enabled": true,
    "github.copilot.chat.generateTests.codeLens": true,
    "github.copilot.chat.languageContext.fix.typescript.enabled": true,
    "github.copilot.chat.languageContext.inline.typescript.enabled": true,
    "github.copilot.chat.languageContext.typescript.enabled": true,
    "github.copilot.chat.codeGeneration.instructions": [
        {
            "text": "- @azure Rule - Use Azure Best Practices: When generating code for Azure, running terminal commands for Azure, or performing operations related to Azure, invoke your `azure_development-get_best_practices` tool if available."
        }
    ],
    "github.copilot.chat.search.keywordSuggestions": true,
    "github.copilot.nextEditSuggestions.enabled": true,
    "github.copilot.nextEditSuggestions.fixes": true,
    "github.copilot.enable": {
        "scminput": true,
        "markdown": true,
        "plaintext": true,
        "YAML": true
    },
    "git.autofetch": true,
    "git.confirmSync": false,
    "githubPullRequests.pullBranch": "never",
    "gitlens.ai.model": "vscode",
    "gitlens.ai.vscode.model": "copilot:gpt-4",
    "gitlens.views.scm.grouped.views": {
        "commits": true,
        "branches": true,
        "remotes": true,
        "stashes": true,
        "tags": true,
        "worktrees": true,
        "contributors": true,
        "repositories": true,
        "searchAndCompare": false,
        "launchpad": false
    },
    "@azure.argTenant": "26f9f20c-b471-4de5-8bb2-c2eb3aa2dc49",
    "console-ninja.featureSet": "Community",
    "workbench.colorTheme": "Visual Studio 2017 Dark - C++",
    "workbench.settings.applyToAllProfiles": [
        "github.copilot.nextEditSuggestions.enabled"
    ],
    "cSpell.userWords": [
        "SALESREP",
        "samq",
        "samqu"
    ],
    "redhat.telemetry.enabled": true,
    "github.copilot.advanced.security.enableSecretFileAccess": true,
    "github.copilot.advanced.securitySettings.executables.allowlist": [
        "*"
    ],
    "github.copilot.advanced.securitySettings.executables.enable": true,
    "github.copilot.advanced.securitySettings.executables.timeout": 300,
    "github.copilot.chat.server.security.anonymizeCallStackFrames": false,
    "settingsSync.ignoredExtensions": [],
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run Cross Device Bootstrap",
            "type": "shell",
            "command": "cross_device_bootstrap.bat >> logs/cross_device_sync.log 2>&1",
            "problemMatcher": [],
            "group": "build"
        },
        {
            "label": "Validate .venv Activation",
            "type": "shell",
            "command": "cmd /c \".venv\\Scripts\\python.exe -c \"import sys; print('[VENV ACTIVE]' if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') && sys.base_prefix != sys.prefix) else '[VENV ERROR]')\" >> logs/cross_device_sync.log 2>&1\"",
            "problemMatcher": []
        },
        {
            "label": "Check device_profile.json",
            "type": "shell",
            "command": "if exist config\\device_profile.json (echo [PROFILE OK] device_profile.json found.) else (echo [PROFILE ERROR] device_profile.json missing.) >> logs/cross_device_sync.log 2>&1",
            "problemMatcher": []
        },
        {
            "label": "Check Git Sync Status",
            "type": "shell",
            "command": "git status >> logs/cross_device_sync.log 2>&1 && echo [GIT OK] || echo [GIT ERROR] >> logs/cross_device_sync.log 2>&1",
            "problemMatcher": []
        },
        {
            "label": "Cross Device Full Sync",
            "dependsOn": [
                "Run Cross Device Bootstrap",
                "Validate .venv Activation",
                "Check device_profile.json",
                "Check Git Sync Status"
            ],
            "dependsOrder": "sequence",
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        },
        {
            "label": "Git Repair and Health Check",
            "type": "shell",
            "command": "git fetch --prune >> logs/cross_device_sync.log 2>&1 && git fsck >> logs/cross_device_sync.log 2>&1 && git gc --auto >> logs/cross_device_sync.log 2>&1 && echo [GIT HEALTH] Repair and health check complete. >> logs/cross_device_sync.log 2>&1",
            "problemMatcher": []
        }
    ]
}