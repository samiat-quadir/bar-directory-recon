[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bar-directory-recon"
version = "0.1.3.dev0"
description = "Bar directory reconnaissance and automation tool for legal professional data extraction"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "Samiat Quadir", email = "sam.quadir@gmail.com" }
]
dependencies = [
    "pydantic>=2.10.6",
    "python-dotenv>=1.0.1",
    "pyyaml>=6.0.2",
    "jinja2>=3.1.6",
    "requests>=2.32.4",
    "aiohttp>=3.12.14",
    "aiofiles>=24.1.0",
    "pandas>=2.3.0",
    "numpy>=2.2.3",
    "beautifulsoup4>=4.13.4",
    "loguru>=0.7.2",
    "typer>=0.15.2",
    "schedule>=1.2.2",
    "watchdog>=6.0.0",
    "selenium>=4.27.1",
    "click>=8.1.8",
    "colorama>=0.4.6",
    "tqdm>=4.67.1",
    "certifi>=2024.12.14",
    "charset-normalizer>=3.4.1",
    "idna>=3.10",
    "urllib3>=2.5.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.3.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.0.0",
    "pre-commit>=4.2.0",
    "bandit>=1.7.5",
    "pytest-mock>=3.11.1",
    "coverage>=7.5",
    "hypothesis>=6",
]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
exclude = '''
(
  /\.venv.*
  |/merge_conflicts_backup/
  |/\.temp_conflicts/
  |/logs/
  |/archive/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
skip = [".venv311", "merge_conflicts_backup", ".temp_conflicts", "logs", "archive"]
known_first_party = ["src", "universal_recon"]

[tool.ruff]
line-length = 88
target-version = "py311"
extend-select = ["E", "F", "W", "I"]
ignore = ["E501"]  # Ignore line too long for now
exclude = [
    ".git",
    ".venv",
    ".venv311",
    "__pycache__",
    "build",
    "dist",
    "logs",
    "archive",
]

[tool.autoflake]
remove-all-unused-imports = true
remove-unused-variables = true
exclude = [".venv", "logs", "archive"]

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
allow_untyped_defs = true
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_return_any = false
warn_unreachable = false
show_error_codes = true
exclude = [
    "archive/",
    "logs/",
    ".venv/",
    "tools/",
    "scripts/"
]

[tool.pytest.ini_options]
minversion = "6.0"
# Start with a modest coverage floor to avoid blocking while we iterate.
addopts = "--cov=src --cov=universal_recon --cov-report=term-missing --cov-fail-under=25"
testpaths = [
    "src/tests",
    "universal_recon/tests"
]
markers = [
    "analytics: mark test as related to analytics modules"
]

[tool.coverage.run]
source = ["src", "universal_recon"]
omit = [
    "src/tests/*",
    "universal_recon/tests/*",
    "*/__pycache__/*",
    "*/test_*",
    "conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
