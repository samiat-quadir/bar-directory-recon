<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="0.602" timestamp="2025-08-20T21:21:09.980472-04:00" hostname="Mothership"><testcase classname="src.tests.test_hallandale_pipeline_success" name="test_pipeline_success" time="0.016"><failure message="AssertionError: assert 'completed' == 'success'&#10;  &#10;  #x1B[0m#x1B[91m- success#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ completed#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tmp_path = WindowsPath('C:/Code/bar-directory-recon/logs/pytest_basetemp_smoke_20250820_212109/test_pipeline_success0'), monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x000001BF5F932EA0&gt;

    def test_pipeline_success(tmp_path, monkeypatch):
        # Setup pipeline with temporary output directory
        output_dir = tmp_path / "out"
        pipeline = HallandalePipeline(str(output_dir))
    
        # Prepare dummy file paths
        dummy_pdf = str(tmp_path / "input.pdf")
        dummy_csv = str(tmp_path / "data.csv")
        dummy_enriched = str(tmp_path / "enriched.csv")
        dummy_excel = str(tmp_path / "report.xlsx")
    
        # Monkeypatch processing steps
        monkeypatch.setattr(
            pipeline.pdf_processor,
            "process_pdf",
            lambda path: {
                "status": "success",
                "properties_count": 5,
                "output_file": dummy_csv,
            },
        )
        monkeypatch.setattr(
            pipeline.enricher,
            "enrich_properties",
            lambda path: {
                "status": "success",
                "enriched_count": 5,
                "output_file": dummy_enriched,
            },
        )
        monkeypatch.setattr(
            pipeline.enricher,
            "generate_summary_report",
            lambda path: {
                "total_records_processed": 5,
                "records_with_emails": 2,
                "records_with_phones": 3,
                "priority_records": 1,
                "corporate_entities": 1,
                "individual_owners": 4,
                "average_data_quality_score": 92,
                "needs_manual_review": 1,
            },
        )
        monkeypatch.setattr(
            pipeline.validator, "validate_properties", lambda path: {"status": "success"}
        )
        monkeypatch.setattr(
            pipeline,
            "_create_excel_export",
            lambda path: {"status": "success", "output_file": dummy_excel},
        )
    
        # Run the pipeline
        results = pipeline.run_full_pipeline(dummy_pdf)
    
        # Assert successful pipeline run and steps
&gt;       assert results["pipeline_status"] == "success"
E       AssertionError: assert 'completed' == 'success'
E         
E         #x1B[0m#x1B[91m- success#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E         #x1B[92m+ completed#x1B[39;49;00m#x1B[90m#x1B[39;49;00m

src\tests\test_hallandale_pipeline_success.py:61: AssertionError</failure></testcase></testsuite></testsuites>