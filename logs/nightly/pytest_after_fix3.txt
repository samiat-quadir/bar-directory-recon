...........F..FF.......................s.........................F...F.s [ 72%]
s...FF......................                                             [100%]
================================== FAILURES ===================================
____________________________ test_pipeline_success ____________________________

tmp_path = WindowsPath('C:/Code/bar-directory-recon/logs/pytest_basetemp/test_pipeline_success0')
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x000001FFA8274C30>

    def test_pipeline_success(tmp_path, monkeypatch):
        # Setup pipeline with temporary output directory
        output_dir = tmp_path / "out"
        pipeline = HallandalePipeline(str(output_dir))
    
        # Prepare dummy file paths
        dummy_pdf = str(tmp_path / "input.pdf")
        dummy_csv = str(tmp_path / "data.csv")
        dummy_enriched = str(tmp_path / "enriched.csv")
        dummy_excel = str(tmp_path / "report.xlsx")
    
        # Monkeypatch processing steps
        monkeypatch.setattr(
            pipeline.pdf_processor,
            "process_pdf",
            lambda path: {
                "status": "success",
                "properties_count": 5,
                "output_file": dummy_csv,
            },
        )
        monkeypatch.setattr(
            pipeline.enricher,
            "enrich_properties",
            lambda path: {
                "status": "success",
                "enriched_count": 5,
                "output_file": dummy_enriched,
            },
        )
        monkeypatch.setattr(
            pipeline.enricher,
            "generate_summary_report",
            lambda path: {
                "total_records_processed": 5,
                "records_with_emails": 2,
                "records_with_phones": 3,
                "priority_records": 1,
                "corporate_entities": 1,
                "individual_owners": 4,
                "average_data_quality_score": 92,
                "needs_manual_review": 1,
            },
        )
        monkeypatch.setattr(
            pipeline.validator, "validate_properties", lambda path: {"status": "success"}
        )
        monkeypatch.setattr(
            pipeline,
            "_create_excel_export",
            lambda path: {"status": "success", "output_file": dummy_excel},
        )
    
        # Run the pipeline
        results = pipeline.run_full_pipeline(dummy_pdf)
    
        # Assert successful pipeline run and steps
>       assert results["pipeline_status"] == "success"
E       AssertionError: assert 'failed' == 'success'
E         
E         - success
E         + failed

src\tests\test_hallandale_pipeline_success.py:61: AssertionError
------------------------------ Captured log call ------------------------------
ERROR    hallandale_pipeline:hallandale_pipeline.py:77 PDF processing failed: Unknown error
____________ TestSecurityManager.test_init_with_service_principal _____________

self = <MagicMock name='ClientSecretCredential' id='2197549520880'>, args = ()
kwargs = {'client_id': 'test-client-id', 'client_secret': 'test-secret', 'tenant_id': 'test-tenant'}
msg = "Expected 'ClientSecretCredential' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'ClientSecretCredential' to be called once. Called 0 times.

C:\ProgramData\miniconda3\Lib\unittest\mock.py:990: AssertionError

During handling of the above exception, another exception occurred:

self = <test_security_manager.TestSecurityManager object at 0x000001FFFFEFD220>
mock_credential = <MagicMock name='ClientSecretCredential' id='2197549520880'>
mock_client = <MagicMock name='SecretClient' id='2197549521552'>

    @patch('src.security_manager.SecretClient')
    @patch('src.security_manager.ClientSecretCredential')
    def test_init_with_service_principal(self, mock_credential, mock_client):
        """Test initialization with service principal credentials."""
        with patch.dict(os.environ, {
            'AZURE_CLIENT_ID': 'test-client-id',
            'AZURE_CLIENT_SECRET': 'test-secret',
            'AZURE_TENANT_ID': 'test-tenant'
        }):
            mock_client_instance = Mock()
            mock_client_instance.list_properties_of_secrets.return_value = iter([])
            mock_client.return_value = mock_client_instance
    
            manager = SecurityManager(keyvault_url="https://test.vault.azure.net/")
    
>           mock_credential.assert_called_once_with(
                tenant_id='test-tenant',
                client_id='test-client-id',
                client_secret='test-secret'
            )
E           AssertionError: Expected 'ClientSecretCredential' to be called once. Called 0 times.

src\tests\test_security_manager.py:42: AssertionError
____________ TestSecurityManager.test_init_with_default_credential ____________

self = <MagicMock name='DefaultAzureCredential' id='2197549521216'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'DefaultAzureCredential' to have been called once. Called 0 times.

C:\ProgramData\miniconda3\Lib\unittest\mock.py:958: AssertionError

During handling of the above exception, another exception occurred:

self = <test_security_manager.TestSecurityManager object at 0x000001FFFFEFD350>
mock_credential = <MagicMock name='DefaultAzureCredential' id='2197549521216'>
mock_client = <MagicMock name='SecretClient' id='2197549522560'>

    @patch('src.security_manager.SecretClient')
    @patch('src.security_manager.DefaultAzureCredential')
    def test_init_with_default_credential(self, mock_credential, mock_client):
        """Test initialization with default credential chain."""
        with patch.dict(os.environ, {}, clear=True):
            mock_client_instance = Mock()
            mock_client_instance.list_properties_of_secrets.return_value = iter([])
            mock_client.return_value = mock_client_instance
    
            manager = SecurityManager(keyvault_url="https://test.vault.azure.net/")
    
>           mock_credential.assert_called_once()
E           AssertionError: Expected 'DefaultAzureCredential' to have been called once. Called 0 times.

src\tests\test_security_manager.py:60: AssertionError
_______________________________ test_import_05 ________________________________

    def test_import_05():
>       __import__("hallandale_pipeline_fixed")

universal_recon\tests\auto_smoke\test_auto_05.py:3: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\hallandale_pipeline_fixed.py:22: in <module>
    class HallandalePipeline:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class HallandalePipeline:
        """Complete Hallandale property processing pipeline."""
    
        def __init__(self, output_dir: str = "outputs/hallandale"):
            self.output_dir = Path(output_dir)
            self.output_dir.mkdir(parents=True, exist_ok=True)
    
            # Create logs directory
            (self.output_dir / "logs").mkdir(exist_ok=True)
    
            # Setup logging
            self._setup_logging()
    
            # Initialize processors
            self.pdf_processor = HallandalePropertyProcessor(output_dir)
            self.enricher = PropertyEnrichment(output_dir)
            self.validator = PropertyValidation(output_dir)
    
            self.logger.info("Hallandale Pipeline initialized")
    
        def _setup_logging(self) -> None:
            """Setup comprehensive logging."""
            log_file = self.output_dir / "logs" / "pipeline.log"
    
            logging.basicConfig(
                level=logging.INFO,
                format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                handlers=[logging.FileHandler(log_file), logging.StreamHandler()],
            )
    
            self.logger = logging.getLogger(__name__)
            self.logger.info("STARTING HALLANDALE PROPERTY PROCESSING PIPELINE")
            self.logger.info("=" * 60)
    
>       def run_pipeline(self, pdf_path: str) -> Dict[str, Any]:
                                                 ^^^^
E       NameError: name 'Dict' is not defined

src\hallandale_pipeline_fixed.py:56: NameError
_______________________________ test_import_09 ________________________________

    def test_import_09():
>       __import__("orchestrator")

universal_recon\tests\auto_smoke\test_auto_09.py:3: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    #!/usr/bin/env python3
    """
    Unified Scraper Orchestrator
    Main controller that coordinates all scraping operations using the modular framework.
    """
    
    import os
    import time
    from datetime import datetime
    from pathlib import Path
    from typing import Any, Dict, List, Optional, Union
    
    import pandas as pd
    
>   from .config_loader import ConfigLoader
E   ImportError: attempted relative import with no known parent package

src\orchestrator.py:15: ImportError
___________________________ test_firm_plugin_loads ____________________________

    def test_firm_plugin_loads():
        m = importlib.import_module('universal_recon.plugins.firm_parser')
>       assert hasattr(m, 'FirmParserPlugin')
E       AssertionError: assert False
E        +  where False = hasattr(<module 'universal_recon.plugins.firm_parser' from 'C:\\Code\\bar-directory-recon\\universal_recon\\plugins\\firm_parser.py'>, 'FirmParserPlugin')

universal_recon\tests\plugins\test_firm_plugin.py:6: AssertionError
_______________________ test_firm_plugin_contract_smoke _______________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x000001FFA831E190>

    def test_firm_plugin_contract_smoke(monkeypatch):
        m = importlib.import_module('universal_recon.plugins.firm_parser')
>       P = m.FirmParserPlugin()
            ^^^^^^^^^^^^^^^^^^
E       AttributeError: module 'universal_recon.plugins.firm_parser' has no attribute 'FirmParserPlugin'

universal_recon\tests\plugins\test_firm_plugin.py:11: AttributeError
============================== warnings summary ===============================
universal_recon\tests\analytics\test_plugin_usage_diff.py:14
  C:\Code\bar-directory-recon\universal_recon\tests\analytics\test_plugin_usage_diff.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.analytics - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.analytics

universal_recon\tests\analytics\test_risk_overlay_emitter.py:18
  C:\Code\bar-directory-recon\universal_recon\tests\analytics\test_risk_overlay_emitter.py:18: PytestUnknownMarkWarning: Unknown pytest.mark.analytics - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.analytics

test_data_hunter.py::test_discovery
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_data_hunter.py::test_discovery returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_framework.py::test_imports
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_framework.py::test_imports returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_framework.py::test_basic_functionality
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_framework.py::test_basic_functionality returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_framework.py::test_config_validation
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_framework.py::test_config_validation returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_google_sheets.py::test_cli_arguments
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_google_sheets.py::test_cli_arguments returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_google_sheets.py::test_logs_directory
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_google_sheets.py::test_logs_directory returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_plugin_architecture.py::test_plugin_architecture
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_plugin_architecture.py::test_plugin_architecture returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_plugin_architecture_fixed.py::test_plugin_architecture
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_plugin_architecture_fixed.py::test_plugin_architecture returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_system.py::test_plugin_registry
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_system.py::test_plugin_registry returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_system.py::test_new_plugins
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_system.py::test_new_plugins returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_system.py::test_universal_automation
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_system.py::test_universal_automation returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_system.py::test_lead_scoring
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_system.py::test_lead_scoring returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_system.py::test_google_sheets_utils
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_system.py::test_google_sheets_utils returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

test_system.py::test_file_structure
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but test_system.py::test_file_structure returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

.venv\Lib\site-packages\_pytest\cacheprovider.py:475
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\cacheprovider.py:475: PytestCacheWarning: could not create cache path C:\Code\bar-directory-recon\.pytest_cache\v\cache\nodeids: [WinError 5] Access is denied: 'C:\\Code\\bar-directory-recon\\.pytest_cache\\v\\cache'
    config.cache.set("cache/nodeids", sorted(self.cached_nodeids))

.venv\Lib\site-packages\_pytest\cacheprovider.py:429
  C:\Code\bar-directory-recon\.venv\Lib\site-packages\_pytest\cacheprovider.py:429: PytestCacheWarning: could not create cache path C:\Code\bar-directory-recon\.pytest_cache\v\cache\lastfailed: [WinError 5] Access is denied: 'C:\\Code\\bar-directory-recon\\.pytest_cache\\v\\cache'
    config.cache.set("cache/lastfailed", self.lastfailed)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
- generated xml file: C:\Code\bar-directory-recon\logs\nightly\junit_after_fix3.xml -
=========================== short test summary info ===========================
FAILED src/tests/test_hallandale_pipeline_success.py::test_pipeline_success
FAILED src/tests/test_security_manager.py::TestSecurityManager::test_init_with_service_principal
FAILED src/tests/test_security_manager.py::TestSecurityManager::test_init_with_default_credential
FAILED universal_recon/tests/auto_smoke/test_auto_05.py::test_import_05 - Nam...
FAILED universal_recon/tests/auto_smoke/test_auto_09.py::test_import_09 - Imp...
FAILED universal_recon/tests/plugins/test_firm_plugin.py::test_firm_plugin_loads
FAILED universal_recon/tests/plugins/test_firm_plugin.py::test_firm_plugin_contract_smoke
7 failed, 90 passed, 3 skipped, 5 deselected, 18 warnings in 37.13s
