<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="7" skipped="3" tests="100" time="37.128" timestamp="2025-08-20T18:15:00.796968-04:00" hostname="Mothership"><testcase classname="src.tests.test_core_modules.TestConfigLoader" name="test_config_loader_init" time="0.001" /><testcase classname="src.tests.test_core_modules.TestConfigLoader" name="test_load_config_from_json_file" time="0.002" /><testcase classname="src.tests.test_core_modules.TestConfigLoader" name="test_config_file_not_found" time="0.001" /><testcase classname="src.tests.test_core_modules.TestDataExtractor" name="test_data_extractor_init" time="0.001" /><testcase classname="src.tests.test_core_modules.TestDataExtractor" name="test_contact_patterns" time="0.001" /><testcase classname="src.tests.test_core_modules.TestDataExtractor" name="test_website_pattern" time="0.001" /><testcase classname="src.tests.test_core_modules.TestUnifiedSchema" name="test_unified_record_creation" time="0.001" /><testcase classname="src.tests.test_core_modules.TestUnifiedSchema" name="test_unified_record_defaults" time="0.001" /><testcase classname="src.tests.test_core_modules.TestUnifiedSchema" name="test_unified_record_with_lists" time="0.001" /><testcase classname="src.tests.test_core_modules.TestUnifiedSchema" name="test_unified_record_timestamps" time="0.001" /><testcase classname="src.tests.test_hallandale_pipeline" name="test_pipeline_nonexistent_pdf" time="0.004" /><testcase classname="src.tests.test_hallandale_pipeline_success" name="test_pipeline_success" time="0.004"><failure message="AssertionError: assert 'failed' == 'success'&#10;  &#10;  - success&#10;  + failed">tmp_path = WindowsPath('C:/Code/bar-directory-recon/logs/pytest_basetemp/test_pipeline_success0')
monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x000001FFA8274C30&gt;

    def test_pipeline_success(tmp_path, monkeypatch):
        # Setup pipeline with temporary output directory
        output_dir = tmp_path / "out"
        pipeline = HallandalePipeline(str(output_dir))
    
        # Prepare dummy file paths
        dummy_pdf = str(tmp_path / "input.pdf")
        dummy_csv = str(tmp_path / "data.csv")
        dummy_enriched = str(tmp_path / "enriched.csv")
        dummy_excel = str(tmp_path / "report.xlsx")
    
        # Monkeypatch processing steps
        monkeypatch.setattr(
            pipeline.pdf_processor,
            "process_pdf",
            lambda path: {
                "status": "success",
                "properties_count": 5,
                "output_file": dummy_csv,
            },
        )
        monkeypatch.setattr(
            pipeline.enricher,
            "enrich_properties",
            lambda path: {
                "status": "success",
                "enriched_count": 5,
                "output_file": dummy_enriched,
            },
        )
        monkeypatch.setattr(
            pipeline.enricher,
            "generate_summary_report",
            lambda path: {
                "total_records_processed": 5,
                "records_with_emails": 2,
                "records_with_phones": 3,
                "priority_records": 1,
                "corporate_entities": 1,
                "individual_owners": 4,
                "average_data_quality_score": 92,
                "needs_manual_review": 1,
            },
        )
        monkeypatch.setattr(
            pipeline.validator, "validate_properties", lambda path: {"status": "success"}
        )
        monkeypatch.setattr(
            pipeline,
            "_create_excel_export",
            lambda path: {"status": "success", "output_file": dummy_excel},
        )
    
        # Run the pipeline
        results = pipeline.run_full_pipeline(dummy_pdf)
    
        # Assert successful pipeline run and steps
&gt;       assert results["pipeline_status"] == "success"
E       AssertionError: assert 'failed' == 'success'
E         
E         - success
E         + failed

src\tests\test_hallandale_pipeline_success.py:61: AssertionError</failure></testcase><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_init_without_keyvault_url" time="0.002" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_init_with_keyvault_url_no_azure" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_init_with_service_principal" time="0.003"><failure message="AssertionError: Expected 'ClientSecretCredential' to be called once. Called 0 times.">self = &lt;MagicMock name='ClientSecretCredential' id='2197549520880'&gt;, args = ()
kwargs = {'client_id': 'test-client-id', 'client_secret': 'test-secret', 'tenant_id': 'test-tenant'}
msg = "Expected 'ClientSecretCredential' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected 'ClientSecretCredential' to be called once. Called 0 times.

C:\ProgramData\miniconda3\Lib\unittest\mock.py:990: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;test_security_manager.TestSecurityManager object at 0x000001FFFFEFD220&gt;
mock_credential = &lt;MagicMock name='ClientSecretCredential' id='2197549520880'&gt;
mock_client = &lt;MagicMock name='SecretClient' id='2197549521552'&gt;

    @patch('src.security_manager.SecretClient')
    @patch('src.security_manager.ClientSecretCredential')
    def test_init_with_service_principal(self, mock_credential, mock_client):
        """Test initialization with service principal credentials."""
        with patch.dict(os.environ, {
            'AZURE_CLIENT_ID': 'test-client-id',
            'AZURE_CLIENT_SECRET': 'test-secret',
            'AZURE_TENANT_ID': 'test-tenant'
        }):
            mock_client_instance = Mock()
            mock_client_instance.list_properties_of_secrets.return_value = iter([])
            mock_client.return_value = mock_client_instance
    
            manager = SecurityManager(keyvault_url="https://test.vault.azure.net/")
    
&gt;           mock_credential.assert_called_once_with(
                tenant_id='test-tenant',
                client_id='test-client-id',
                client_secret='test-secret'
            )
E           AssertionError: Expected 'ClientSecretCredential' to be called once. Called 0 times.

src\tests\test_security_manager.py:42: AssertionError</failure></testcase><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_init_with_default_credential" time="0.002"><failure message="AssertionError: Expected 'DefaultAzureCredential' to have been called once. Called 0 times.">self = &lt;MagicMock name='DefaultAzureCredential' id='2197549521216'&gt;

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected 'DefaultAzureCredential' to have been called once. Called 0 times.

C:\ProgramData\miniconda3\Lib\unittest\mock.py:958: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;test_security_manager.TestSecurityManager object at 0x000001FFFFEFD350&gt;
mock_credential = &lt;MagicMock name='DefaultAzureCredential' id='2197549521216'&gt;
mock_client = &lt;MagicMock name='SecretClient' id='2197549522560'&gt;

    @patch('src.security_manager.SecretClient')
    @patch('src.security_manager.DefaultAzureCredential')
    def test_init_with_default_credential(self, mock_credential, mock_client):
        """Test initialization with default credential chain."""
        with patch.dict(os.environ, {}, clear=True):
            mock_client_instance = Mock()
            mock_client_instance.list_properties_of_secrets.return_value = iter([])
            mock_client.return_value = mock_client_instance
    
            manager = SecurityManager(keyvault_url="https://test.vault.azure.net/")
    
&gt;           mock_credential.assert_called_once()
E           AssertionError: Expected 'DefaultAzureCredential' to have been called once. Called 0 times.

src\tests\test_security_manager.py:60: AssertionError</failure></testcase><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_get_secret_from_keyvault" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_get_secret_fallback_env_var" time="0.002" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_get_secret_auto_env_var" time="0.002" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_get_secret_not_found" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_get_email_config" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_get_email_config_error" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_get_api_config" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_get_api_config_partial" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_get_google_sheets_config" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_get_database_config" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_health_check_fallback_mode" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_health_check_keyvault_accessible" time="0.001" /><testcase classname="src.tests.test_security_manager.TestSecurityManager" name="test_health_check_keyvault_error" time="0.001" /><testcase classname="src.tests.test_security_manager.TestGlobalFunctions" name="test_get_security_manager_singleton" time="0.001" /><testcase classname="src.tests.test_security_manager.TestGlobalFunctions" name="test_get_secret_convenience" time="0.001" /><testcase classname="test_data_hunter" name="test_discovery" time="34.635" /><testcase classname="test_framework" name="test_imports" time="0.003" /><testcase classname="test_framework" name="test_basic_functionality" time="0.004" /><testcase classname="test_framework" name="test_config_validation" time="0.001" /><testcase classname="test_google_sheets" name="test_cli_arguments" time="0.007" /><testcase classname="test_google_sheets" name="test_logs_directory" time="0.001" /><testcase classname="test_plugin_architecture" name="test_plugin_architecture" time="0.020" /><testcase classname="test_plugin_architecture_fixed" name="test_plugin_architecture" time="0.021" /><testcase classname="test_realtor_system" name="test_imports" time="0.003"><skipped type="pytest.skip" message="Plugin import failed: No module named 'webdriver_manager.chrome'; 'webdriver_manager' is not a package">C:\Code\bar-directory-recon\test_realtor_system.py:36: Plugin import failed: No module named 'webdriver_manager.chrome'; 'webdriver_manager' is not a package</skipped></testcase><testcase classname="test_realtor_system" name="test_directories" time="0.001" /><testcase classname="test_realtor_system" name="test_files" time="0.001" /><testcase classname="test_realtor_system" name="test_plugin_registry" time="0.001" /><testcase classname="test_system" name="test_plugin_registry" time="0.001" /><testcase classname="test_system" name="test_new_plugins" time="0.009" /><testcase classname="test_system" name="test_universal_automation" time="0.010" /><testcase classname="test_system" name="test_lead_scoring" time="0.005" /><testcase classname="test_system" name="test_google_sheets_utils" time="0.001" /><testcase classname="test_system" name="test_file_structure" time="0.001" /><testcase classname="tests.test_security_manager_local" name="test_placeholder" time="0.001" /><testcase classname="universal_recon.tests.analytics.test_plugin_usage_diff.TestPluginUsageDiff" name="test_cli_plugin_diff" time="0.014" /><testcase classname="universal_recon.tests.analytics.test_plugin_usage_diff.TestPluginUsageDiff" name="test_load_plugins_with_invalid_json" time="0.002" /><testcase classname="universal_recon.tests.analytics.test_plugin_usage_diff.TestPluginUsageDiff" name="test_load_plugins_with_missing_file" time="0.001" /><testcase classname="universal_recon.tests.analytics.test_plugin_usage_diff.TestPluginUsageDiff" name="test_load_plugins_with_valid_json" time="0.002" /><testcase classname="universal_recon.tests.analytics.test_plugin_usage_diff" name="test_load_plugins" time="0.001" /><testcase classname="universal_recon.tests.analytics.test_plugin_usage_diff" name="test_load_plugins_missing_file" time="0.001" /><testcase classname="universal_recon.tests.analytics.test_risk_overlay_emitter.TestRiskOverlayEmitter" name="test_basic_risk" time="0.002" /><testcase classname="universal_recon.tests.analytics.test_risk_overlay_emitter.TestRiskOverlayEmitter" name="test_calculate_risk_level" time="0.002" /><testcase classname="universal_recon.tests.analytics.test_risk_overlay_emitter.TestRiskOverlayEmitter" name="test_emit_risk_overlay" time="0.004" /><testcase classname="universal_recon.tests.analytics.test_risk_overlay_emitter.TestRiskOverlayEmitter" name="test_export_json_file" time="0.004" /><testcase classname="universal_recon.tests.analytics.test_risk_overlay_emitter.TestRiskOverlayEmitter" name="test_load_validator_tiers" time="0.002" /><testcase classname="universal_recon.tests.auto_smoke.test_auto_01" name="test_import_01" time="0.003" /><testcase classname="universal_recon.tests.auto_smoke.test_auto_02" name="test_import_02" time="0.002" /><testcase classname="universal_recon.tests.auto_smoke.test_auto_03" name="test_import_03" time="0.001" /><testcase classname="universal_recon.tests.auto_smoke.test_auto_04" name="test_import_04" time="0.001" /><testcase classname="universal_recon.tests.auto_smoke.test_auto_05" name="test_import_05" time="0.002"><failure message="NameError: name 'Dict' is not defined">def test_import_05():
&gt;       __import__("hallandale_pipeline_fixed")

universal_recon\tests\auto_smoke\test_auto_05.py:3: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\hallandale_pipeline_fixed.py:22: in &lt;module&gt;
    class HallandalePipeline:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class HallandalePipeline:
        """Complete Hallandale property processing pipeline."""
    
        def __init__(self, output_dir: str = "outputs/hallandale"):
            self.output_dir = Path(output_dir)
            self.output_dir.mkdir(parents=True, exist_ok=True)
    
            # Create logs directory
            (self.output_dir / "logs").mkdir(exist_ok=True)
    
            # Setup logging
            self._setup_logging()
    
            # Initialize processors
            self.pdf_processor = HallandalePropertyProcessor(output_dir)
            self.enricher = PropertyEnrichment(output_dir)
            self.validator = PropertyValidation(output_dir)
    
            self.logger.info("Hallandale Pipeline initialized")
    
        def _setup_logging(self) -&gt; None:
            """Setup comprehensive logging."""
            log_file = self.output_dir / "logs" / "pipeline.log"
    
            logging.basicConfig(
                level=logging.INFO,
                format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                handlers=[logging.FileHandler(log_file), logging.StreamHandler()],
            )
    
            self.logger = logging.getLogger(__name__)
            self.logger.info("STARTING HALLANDALE PROPERTY PROCESSING PIPELINE")
            self.logger.info("=" * 60)
    
&gt;       def run_pipeline(self, pdf_path: str) -&gt; Dict[str, Any]:
                                                 ^^^^
E       NameError: name 'Dict' is not defined

src\hallandale_pipeline_fixed.py:56: NameError</failure></testcase><testcase classname="universal_recon.tests.auto_smoke.test_auto_06" name="test_import_06" time="0.002" /><testcase classname="universal_recon.tests.auto_smoke.test_auto_07" name="test_import_07" time="0.004" /><testcase classname="universal_recon.tests.auto_smoke.test_auto_08" name="test_import_08" time="0.002" /><testcase classname="universal_recon.tests.auto_smoke.test_auto_09" name="test_import_09" time="0.002"><failure message="ImportError: attempted relative import with no known parent package">def test_import_09():
&gt;       __import__("orchestrator")

universal_recon\tests\auto_smoke\test_auto_09.py:3: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    #!/usr/bin/env python3
    """
    Unified Scraper Orchestrator
    Main controller that coordinates all scraping operations using the modular framework.
    """
    
    import os
    import time
    from datetime import datetime
    from pathlib import Path
    from typing import Any, Dict, List, Optional, Union
    
    import pandas as pd
    
&gt;   from .config_loader import ConfigLoader
E   ImportError: attempted relative import with no known parent package

src\orchestrator.py:15: ImportError</failure></testcase><testcase classname="universal_recon.tests.auto_smoke.test_auto_10" name="test_import_10" time="0.003" /><testcase classname="universal_recon.tests.infrastructure.test_chromedriver" name="test_chromedriver" time="0.001"><skipped type="pytest.skip" message="ChromeDriver test skipped - version mismatch detected">C:\Code\bar-directory-recon\universal_recon\tests\infrastructure\test_chromedriver.py:6: ChromeDriver test skipped - version mismatch detected</skipped></testcase><testcase classname="universal_recon.tests.infrastructure.test_network_connectivity" name="test_external_api_connectivity" time="0.000"><skipped type="pytest.skip" message="Network connectivity test - skipped in CI environment">C:\Code\bar-directory-recon\universal_recon\tests\infrastructure\test_network_connectivity.py:6: Network connectivity test - skipped in CI environment</skipped></testcase><testcase classname="universal_recon.tests.plugins.test_firm_parser.TestFirmParserPlugin" name="test_plugin_output_soft_mode" time="0.002" /><testcase classname="universal_recon.tests.plugins.test_firm_parser.TestFirmParserPlugin" name="test_plugin_output_strict_mode" time="0.001" /><testcase classname="universal_recon.tests.plugins.test_firm_parser" name="test_parse_firm_data" time="0.001" /><testcase classname="universal_recon.tests.plugins.test_firm_plugin" name="test_firm_plugin_loads" time="0.001"><failure message="AssertionError: assert False&#10; +  where False = hasattr(&lt;module 'universal_recon.plugins.firm_parser' from 'C:\\Code\\bar-directory-recon\\universal_recon\\plugins\\firm_parser.py'&gt;, 'FirmParserPlugin')">def test_firm_plugin_loads():
        m = importlib.import_module('universal_recon.plugins.firm_parser')
&gt;       assert hasattr(m, 'FirmParserPlugin')
E       AssertionError: assert False
E        +  where False = hasattr(&lt;module 'universal_recon.plugins.firm_parser' from 'C:\\Code\\bar-directory-recon\\universal_recon\\plugins\\firm_parser.py'&gt;, 'FirmParserPlugin')

universal_recon\tests\plugins\test_firm_plugin.py:6: AssertionError</failure></testcase><testcase classname="universal_recon.tests.plugins.test_firm_plugin" name="test_firm_plugin_contract_smoke" time="0.001"><failure message="AttributeError: module 'universal_recon.plugins.firm_parser' has no attribute 'FirmParserPlugin'">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x000001FFA831E190&gt;

    def test_firm_plugin_contract_smoke(monkeypatch):
        m = importlib.import_module('universal_recon.plugins.firm_parser')
&gt;       P = m.FirmParserPlugin()
            ^^^^^^^^^^^^^^^^^^
E       AttributeError: module 'universal_recon.plugins.firm_parser' has no attribute 'FirmParserPlugin'

universal_recon\tests\plugins\test_firm_plugin.py:11: AttributeError</failure></testcase><testcase classname="universal_recon.tests.plugins.test_loader" name="test_plugin_loader_lists_plugins" time="0.001" /><testcase classname="universal_recon.tests.plugins.test_ml_labeler.TestMLLabelerPlugin" name="test_plugin_output_soft_mode" time="0.003" /><testcase classname="universal_recon.tests.plugins.test_ml_labeler.TestMLLabelerPlugin" name="test_plugin_output_strict_mode" time="0.002" /><testcase classname="universal_recon.tests.plugins.test_social_link_parser.TestSocialLinkParser" name="test_social_links_soft_mode" time="0.002" /><testcase classname="universal_recon.tests.plugins.test_social_link_parser.TestSocialLinkParser" name="test_social_links_strict_mode" time="0.001" /><testcase classname="universal_recon.tests.plugins.test_social_plugin" name="test_social_plugin_loads" time="0.001" /><testcase classname="universal_recon.tests.plugins.test_social_plugin" name="test_social_plugin_contract_smoke" time="0.001" /><testcase classname="universal_recon.tests.test_basic" name="test_basic" time="0.001" /><testcase classname="universal_recon.tests.test_risk_overlay_emitter" name="test_emit_site_risk_json" time="0.009" /><testcase classname="universal_recon.tests.test_risk_overlay_emitter" name="test_calculate_risk_level" time="0.001" /><testcase classname="universal_recon.tests.test_risk_overlay_emitter" name="test_load_validator_tiers" time="0.007" /><testcase classname="universal_recon.tests.utils.test_audit_report_generator.TestAuditReportGenerator" name="test_generate_audit_report_structure" time="0.001" /><testcase classname="universal_recon.tests.utils.test_audit_report_generator.TestAuditReportGenerator" name="test_plugin_grouping" time="0.001" /><testcase classname="universal_recon.tests.utils.test_audit_report_generator.TestAuditReportGenerator" name="test_score_tier_counts" time="0.001" /><testcase classname="universal_recon.tests.utils.test_audit_report_generator" name="test_generate_audit_report" time="0.001" /><testcase classname="universal_recon.tests.utils.test_score_predictor.TestScorePredictor" name="test_confidence_mapping" time="0.001" /><testcase classname="universal_recon.tests.utils.test_score_predictor.TestScorePredictor" name="test_prediction_keys_added" time="0.001" /><testcase classname="universal_recon.tests.utils.test_score_predictor.TestScorePredictor" name="test_score_range" time="0.001" /><testcase classname="universal_recon.tests.utils.test_score_predictor" name="test_predict_score" time="0.001" /><testcase classname="universal_recon.tests.utils.test_score_visualizer.TestScoreVisualizer" name="test_generate_heatmap_data_structure" time="0.001" /><testcase classname="universal_recon.tests.utils.test_score_visualizer.TestScoreVisualizer" name="test_save_heatmap_data" time="0.002" /><testcase classname="universal_recon.tests.utils.test_score_visualizer" name="test_generate_visualization" time="0.001" /></testsuite></testsuites>