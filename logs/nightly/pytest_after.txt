C:\Code\bar-directory-recon\.venv-ci\Lib\site-packages\coverage\control.py:943: CoverageWarning: No data was collected. (no-data-collected)
  self._warn("No data was collected.", slug="no-data-collected")
E
=================================== ERRORS ====================================
____________ ERROR at setup of test_config_loader_env_and_defaults ____________

cls = <class '_pytest.runner.CallInfo'>
func = <function call_and_report.<locals>.<lambda> at 0x0000022DF7E3F4C0>
when = 'setup'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

    @classmethod
    def from_call(
        cls,
        func: Callable[[], TResult],
        when: Literal["collect", "setup", "call", "teardown"],
        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,
    ) -> CallInfo[TResult]:
        """Call func, wrapping the result in a CallInfo.
    
        :param func:
            The function to call. Called without arguments.
        :type func: Callable[[], _pytest.runner.TResult]
        :param when:
            The phase in which the function is called.
        :param reraise:
            Exception or exceptions that shall propagate if raised by the
            function, instead of being wrapped in the CallInfo.
        """
        excinfo = None
        instant = timing.Instant()
        try:
>           result: TResult | None = func()
                                     ^^^^^^

.venv-ci\Lib\site-packages\_pytest\runner.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv-ci\Lib\site-packages\_pytest\runner.py:246: in <lambda>
    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\pluggy\_hooks.py:512: in __call__
    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\pluggy\_manager.py:120: in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\logging.py:843: in pytest_runtest_setup
    yield
.venv-ci\Lib\site-packages\_pytest\capture.py:895: in pytest_runtest_setup
    return (yield)
            ^^^^^
.venv-ci\Lib\site-packages\_pytest\runner.py:164: in pytest_runtest_setup
    item.session._setupstate.setup(item)
.venv-ci\Lib\site-packages\_pytest\runner.py:514: in setup
    col.setup()
.venv-ci\Lib\site-packages\_pytest\python.py:1674: in setup
    self._request._fillfixtures()
.venv-ci\Lib\site-packages\_pytest\fixtures.py:719: in _fillfixtures
    item.funcargs[argname] = self.getfixturevalue(argname)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\fixtures.py:548: in getfixturevalue
    fixturedef = self._get_active_fixturedef(argname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\fixtures.py:639: in _get_active_fixturedef
    fixturedef.execute(request=subrequest)
.venv-ci\Lib\site-packages\_pytest\fixtures.py:1127: in execute
    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\pluggy\_hooks.py:512: in __call__
    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\pluggy\_manager.py:120: in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\pluggy\_callers.py:53: in run_old_style_hookwrapper
    return result.get_result()
           ^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\pluggy\_callers.py:38: in run_old_style_hookwrapper
    res = yield
          ^^^^^
.venv-ci\Lib\site-packages\_pytest\setuponly.py:36: in pytest_fixture_setup
    return (yield)
            ^^^^^
.venv-ci\Lib\site-packages\_pytest\fixtures.py:1195: in pytest_fixture_setup
    result = call_fixture_func(fixturefunc, request, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\fixtures.py:922: in call_fixture_func
    fixture_result = next(generator)
                     ^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\tmpdir.py:264: in tmp_path
    path = _mk_tmp(request, tmp_path_factory)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\tmpdir.py:251: in _mk_tmp
    return factory.mktemp(name, numbered=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\tmpdir.py:130: in mktemp
    basename = self._ensure_relative_to_basetemp(basename)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\tmpdir.py:111: in _ensure_relative_to_basetemp
    if (self.getbasetemp() / basename).resolve().parent != self.getbasetemp():
        ^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\tmpdir.py:186: in getbasetemp
    basetemp = make_numbered_dir_with_cleanup(
.venv-ci\Lib\site-packages\_pytest\pathlib.py:407: in make_numbered_dir_with_cleanup
    raise e
.venv-ci\Lib\site-packages\_pytest\pathlib.py:388: in make_numbered_dir_with_cleanup
    p = make_numbered_dir(root, prefix, mode)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\pathlib.py:229: in make_numbered_dir
    max_existing = max(map(parse_num, find_suffixes(root, prefix)), default=-1)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv-ci\Lib\site-packages\_pytest\pathlib.py:188: in extract_suffixes
    for entry in iter:
                 ^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

root = WindowsPath('C:/Users/samqu/AppData/Local/Temp/pytest-of-samqu')
prefix = 'pytest-'

    def find_prefixed(root: Path, prefix: str) -> Iterator[os.DirEntry[str]]:
        """Find all elements in root that begin with the prefix, case-insensitive."""
        l_prefix = prefix.lower()
>       for x in os.scandir(root):
                 ^^^^^^^^^^^^^^^^
E       PermissionError: [WinError 5] Access is denied: 'C:\\Users\\samqu\\AppData\\Local\\Temp\\pytest-of-samqu'

.venv-ci\Lib\site-packages\_pytest\pathlib.py:176: PermissionError

---------- coverage: platform win32, python 3.13.6-final-0 -----------
Name                               Stmts   Miss  Cover   Missing
----------------------------------------------------------------
src\__init__.py                        0      0   100%
src\config_loader.py                 120    120     0%   6-332
src\data_extractor.py                272    272     0%   7-437
src\data_hunter.py                   268    268     0%   7-543
src\hallandale_pipeline.py           162    162     0%   7-299
src\hallandale_pipeline_fixed.py     140    140     0%   6-260
src\logger.py                        165    165     0%   6-357
src\notification_agent.py            169    169     0%   7-360
src\orchestrator.py                  277    277     0%   7-597
src\pagination_manager.py            204    204     0%   7-357
src\pdf_processor.py                 220    220     0%   7-450
src\property_enrichment.py           211    211     0%   8-468
src\property_validation.py           286    286     0%   7-617
src\security_audit.py                165    165     0%   7-371
src\security_manager.py               88     88     0%   15-212
src\unified_schema.py                153    153     0%   7-355
src\ut_bar.py                        188    188     0%   7-237
src\webdriver_manager.py             177    177     0%   7-289
----------------------------------------------------------------
TOTAL                               3265   3265     0%
Coverage XML written to file logs\nightly\coverage_after.xml

=========================== short test summary info ===========================
ERROR universal_recon/tests/heatmap_targeted/test_heatmap_config_loader.py::test_config_loader_env_and_defaults
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!
