"""
Score Visualizer module for creating visual representations of record scores.
This module provides functionality to generate and save heatmap data
representing the scores of records across different plugins and record types.
"""
import json
import os
from collections import defaultdict


def generate_heatmap_data(records):
    """
    Generate a heatmap data structure from record scores.

    Args:
        records (list): List of record dictionaries with plugin, type, and score keys

    Returns:
        dict: Nested dictionary with plugin -> type -> score_category -> count
    """
    # Initialize the heatmap data structure
    heatmap = defaultdict(lambda: defaultdict(lambda: {"critical": 0, "warning": 0, "clean": 0}))

    # Process each record
    for record in records:
        plugin = record.get("plugin", "unknown")
        record_type = record.get("type", "unknown")
        score = record.get("score", 0)

        # Categorize the score
        # Tests expect specific categorization logic:
        # Score 1-2: critical, Score 3-4: warning, Score 5: clean
        if score <= 2:
            category = "critical"
        elif score <= 4:
            category = "warning"
        else:
            category = "clean"

        # Increment the count for this plugin, type, and category
        heatmap[plugin][record_type][category] += 1

    # Convert defaultdict to regular dict for serialization
    return {
        plugin: {record_type: dict(categories) for record_type, categories in plugin_data.items()}
        for plugin, plugin_data in heatmap.items()
    }


def save_heatmap_data(site_name, heatmap_data):
    """
    Save heatmap data to a JSON file.

    Args:
        site_name (str): Name of the site/run to include in the filename
        heatmap_data (dict): Heatmap data generated by generate_heatmap_data

    Returns:
        str: Path to the saved file
    """
    # Ensure output directory exists
    os.makedirs("output/reports", exist_ok=True)

    # Generate the output path
    output_path = f"output/reports/{site_name}_heatmap.json"

    # Save the data to a JSON file
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(heatmap_data, f, indent=2)

    return output_path
