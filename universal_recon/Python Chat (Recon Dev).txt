summary:
  assistant_name: Python Chat (Recon Dev)
  role: Core Python engineering + modular orchestration
  focus:
    - Building a resilient, CLI-aware scraping framework for legal directories
    - Converting monolithic recon logic into maintainable modules
    - Driving integration of plugins, snapshots, normalization, and test support
    - Supporting plugin interoperability and cross-team schema consistency

  chat_scope:
    start_date: 2025-03-27
    current_phase: Phase 5 – Plugin Integration, Testing, Snapshot Logic
    system_responsibilities:
      - Accept recon prompt + recon architecture vision
      - Migrate recon logic from v1 to modular structure (`v3.1`)
      - Align with ADA + Claude on:
        - Folder layout
        - Plugin design pattern (`apply(driver, context)`)
        - Retry logic via `retry.py`
        - Schema standard (`type`, `value`, `xpath`, `context`, `url`, etc.)
        - Snapshot integration using Claude’s `snapshot_manager`
        - CLI flags (`--strict`, `--run-plugin`, `--dry-run`)
      - Own integration of:
        - `plugin_loader.py`
        - `record_normalizer.py`
        - `script_template_generator.py`
        - Plugin orchestration and result normalization
        - CLI argument parsing

  current_alignment:
    claude:
      - Confirmed plugin interface compliance
      - Using `save_screenshot()` from `snapshot_manager.py`
      - Awaiting orchestrator injection of snapshot points (`landing`, `post_core`, `post_plugin`)
      - Will scaffold `test_email_plugin.py` and `test_normalizer.py`
    ada:
      - Provided ADA schema and plugin contract
      - Supplied `plugin_loader.py`, `retry.py`, and `script_template_generator.py`
      - Will deliver `record_field_validator.py` and `DEV_GUIDE.md`
      - All plugins run post-core via `plugin_loader`, then normalized

  local_user_setup:
    - User has project folder:
        path: C:\Users\samq\...\bar-directory-recon\universal_recon
    - Modules organized under: `core/`, `plugins/`, `utils/`, `detection/`, `configs/`, `tests/`
    - `.env` system set up for local development (`env_loader.py`)
    - Project scaffold stored in local `v1` script for future comparison

  milestone_timeline:
    - Phase 1: Recon Script Review + Vision Setup ✅
    - Phase 2: Architecture Convergence (YAML-based sync) ✅
    - Phase 3: Plugin & Schema Lock-in ✅
    - Phase 4: Live Plugin Execution + Normalization ✅
    - Phase 5: Snapshot Logic, CLI Interface, Unit Tests ⚙️ IN PROGRESS
    - Phase 6: ML Labeling, CI integration, Plugin Registry (upcoming)

  next_actions:
    - Confirm Claude’s `orchestrator.py` snapshot hook injection after upload
    - Finalize CLI parsing (`main.py`) for plugin control and strict mode
    - Create `tests/` unit scaffolds for `plugins/`, `utils/`, `detection/`
    - Prepare `record_normalizer` to accept `strict=True` on CLI toggle
    - Align test output validation with ADA’s upcoming `record_field_validator.py`
    - Begin dry-run plugin test execution using mock HTML
