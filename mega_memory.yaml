profile:
  goals: "AI integration and automation across multiple devices"
  active_projects:
    - name: "bar-directory-recon"
      phase: "23–24"
      status: "paused"
    - name: "AI Integration Roadmap"
      status: "in progress"

environment:
  - "ASUS laptop (Python 3.13.2, primary development machine)"
  - "GitHub Copilot on VS Code Insiders (development environment for coding assistance)"
  - "Google Pixel mobile (for on-the-go monitoring and notifications)"
  - "Work Desktop (secondary machine for running tasks and automation)"

preferences:
  - "Scripts should be plug-and-play (minimal configuration needed to run)"
  - "Prefer minimal manual edits to code for setup or usage"
  - "Code must be debug-friendly (clear logging and error messages for easy troubleshooting)"
  - "Provide instructions suitable for a novice user"

active_tools:
  - "Python 3.13.2 (programming language for all automation scripts)"
  - "Gmail API (for sending email notifications and possibly reading incoming emails)"
  - "Motion API (for creating/updating tasks in Motion productivity app)"
  - "Flask (Python web framework to host webhook endpoints locally)"
  - "Ngrok (tool to expose local Flask server to a public URL for webhooks)"
  - "Git & GitHub (version control, with automation scripts auto-committing to a GitHub repository)"
  - "Windows Task Scheduler (to run scripts on a defined schedule automatically)"
  - "Google Cloud Functions (serverless triggers or schedulers to invoke automation remotely)"

script_inventory:
  - name: "bar_directory_recon.py"
    purpose: "Main orchestrator script running the bar-directory-recon process"
    dependencies: ["Python standard libraries", "Project modules"]
    integrations: ["Git", "Gmail API", "Motion API"]
    type: "core"

  - name: "email_notifier.py"
    purpose: "Sends email updates via Gmail API"
    integrations: ["Gmail API"]
    type: "auxiliary"

  - name: "motion_updater.py"
    purpose: "Handles task updates through Motion API"
    integrations: ["Motion API"]
    type: "auxiliary"

  - name: "webhook_server.py"
    purpose: "Local webhook endpoint using Flask and Ngrok"
    integrations: ["Ngrok", "Google Cloud Functions"]
    type: "auxiliary"

  - name: "auto_commit.py"
    purpose: "Automatically commits and pushes changes to GitHub"
    integrations: ["GitHub"]
    type: "auxiliary"

integrations:
  Gmail_API:
    role: "Email notifications and alerts"
    related_scripts: ["email_notifier.py", "bar_directory_recon.py"]

  Motion_API:
    role: "Task creation and management automation"
    related_scripts: ["motion_updater.py", "bar_directory_recon.py"]

  GitHub:
    role: "Automated version control and backups"
    related_scripts: ["auto_commit.py", "bar_directory_recon.py"]

  Flask_Ngrok:
    role: "External trigger integrations via webhooks"
    related_scripts: ["webhook_server.py"]

  Task_Scheduler:
    role: "Local scheduled execution of automation scripts"

  Google_Cloud_Functions:
    role: "Remote, cloud-based function triggering local automations"

ai_assistant_directives:
  general_guidelines:
    - Prioritize automation and efficiency.
    - Clearly separate required from optional steps.
    - Proactively suggest troubleshooting.
    - Reference established setups to avoid redundancy.
    - Ensure cross-device compatibility.

  code_and_scripts:
    - Provide modular, maintainable scripts.
    - Include test modes, detailed logging, and clear error handling.
    - Provide GitHub Copilot Agent instructions for minor script edits.

  setup_and_configuration:
    - Maintain consistently structured .env files.
    - Document central configuration and credential references clearly.
    - Avoid direct manual edits of sensitive credentials.

  productivity_and_task_management:
    - Optimize and proactively adjust Motion App integrations.
    - Regularly review habit and schedule adjustments post-milestones.

  long_term_goal_recommendations:
    - Suggest scaling automation to client-facing use.
    - Evaluate new technologies regularly.
    - Recommend opportunities for automation upscaling.

  troubleshooting_and_support:
    - Maintain a central error and troubleshooting log.
    - Provide structured debugging checklists.
    - Document changes or patches comprehensively.

  seo_marketing:
    - Regularly suggest SEO improvements based on data.
    - Explore and recommend AI-driven content optimization methods.
    - Automate client reporting whenever possible.

  project_management_and_documentation:
    - Archive completed phases with concise summaries.
    - Maintain clear version control documentation.
    - Suggest structured milestone tracking aligned with best practices.

pitfall_avoidance_directives:
  - Verify scripts/configurations cross-device.
  - Proactively manage dependency updates.
  - Suggest structured error reporting.
  - Regularly validate API keys and OAuth credentials.
  - Clearly archive deprecated elements.

continuous_improvement_directives:
  - Schedule regular workflow reviews.
  - Recommend code modularization and documentation.
  - Continuously propose new automation enhancements.
  - Provide comprehensive script testing guidelines.

communication_and_usability_directives:
  - Clearly label required vs. optional actions.
  - Minimize user's manual script intervention.
  - Instructions must remain beginner-friendly and detailed.
financial_and_investment_goals:
  - Explore passive income sources (e.g., rental car/Turo opportunities in Fort Lauderdale).
  - Leverage AI-driven financial analytics for optimizing investments in cryptocurrencies and retirement strategies.

personal_productivity_context:
  - User struggles with ADHD, procrastination, anxiety.
  - Preference for habit stacking existing routines (smoking breaks) rather than abrupt habit elimination.
  - Structured evening wind-down routines required due to anxiety-related sleep difficulties.

known_recurring_pitfalls:
  - Device synchronization (ASUS laptop ↔ Work Desktop) issues causing script errors.
  - Credential/token expirations disrupting workflow continuity.
  - Ensuring consistent environments (Python versions, library dependencies) across devices.

scraping_challenges_and_guidelines:
  - Regularly anticipate and handle CAPTCHAs, dynamic loading (AJAX), pagination, and iframe issues.
  - Implement automated detection and handling methods (e.g., Selenium waits, retries, proxy rotation).
  - Continuously update scraping heuristics as websites evolve.

ai_interaction_philosophy:
  - Minimize decision fatigue by proactively handling minor decisions.
  - Provide explicitly structured, step-by-step actionable plans.
  - Anticipate user confusion and preemptively clarify potential ambiguities.

recommended_tools:
  automation_monitoring:
    - name: "Sentry"
      purpose: "Real-time error and performance monitoring for Python scripts"
      integration:
        - "Install via pip (sentry-sdk)"
        - "Initialize with DSN at startup"
      benefits:
        - "Proactive error alerts with detailed debugging data"
        - "Cross-device and cross-platform monitoring (ASUS laptop, Work desktop, Cloud functions)"

    - name: "Healthchecks.io"
      purpose: "Monitoring for scheduled tasks and scripts"
      integration:
        - "Simple HTTP GET request at script completion"
      benefits:
        - "Automatic alerts if tasks don't complete as scheduled"
        - "Centralized dashboard for task status visibility"

  workflow_visualization:
    - name: "Prefect"
      purpose: "Workflow orchestration and real-time visualization for complex automations"
      integration:
        - "Wrap existing scripts into Prefect tasks/flows"
        - "Run locally or via Prefect Cloud"
      benefits:
        - "Visual dashboards and task execution logs"
        - "Robust error handling and automated retries"

    - name: "n8n"
      purpose: "Visual, node-based automation builder with low-code integrations"
      integration:
        - "Drag-and-drop interface to build and monitor workflows"
        - "Hosted self-service or cloud-based"
      benefits:
        - "Clear visual pipeline of automation processes"
        - "Mobile-friendly dashboard for task monitoring"

  seo_observability:
    - name: "Google Search Console + Looker Studio"
      purpose: "SEO performance dashboard and analytics"
      integration:
        - "Direct connection via Looker Studio or Python API integration"
      benefits:
        - "Real-time SEO performance visibility"
        - "Data-driven optimization decisions"

    - name: "ScrapeOps"
      purpose: "Web scraping workflow observability"
      integration:
        - "Quick setup for real-time monitoring of scraping scripts"
      benefits:
        - "Automated anomaly detection and alerting"
        - "Central dashboard for scraping health checks"

  productivity_and_personal_systems:
    - name: "Notion"
      purpose: "Personalized productivity workspace for task and data management"
      integration:
        - "RESTful API integrations with Python scripts"
        - "Centralized dashboard for personal and automation data"
      benefits:
        - "ADHD-friendly visual organization and quick-capture capability"
        - "Cross-platform synchronization"

    - name: "Todoist"
      purpose: "Lightweight task capturing and daily checklist management"
      integration:
        - "Natural language task entry with automated scheduling"
        - "API-based synchronization with Motion and automation scripts"
      benefits:
        - "Reduces cognitive load by capturing tasks quickly"
        - "Centralized task inbox integrated with Motion scheduling"

  scalable_orchestration_webhooks:
    - name: "Pipedream"
      purpose: "Serverless cloud-based orchestration for scalable automation workflows"
      integration:
        - "Python-compatible workflow steps and no-code connectors"
      benefits:
        - "Robust webhook management and centralized logging"
        - "High scalability and reduced local dependency"

    - name: "Hookdeck"
      purpose: "Robust webhook event management and reliability"
      integration:
        - "Stable webhook URLs with built-in retry and queuing"
      benefits:
        - "Enhanced webhook reliability and visibility"
        - "Simplifies debugging and webhook-driven automations"

additional_insights_and_recommendations:
  seo_marketing:
    - Use Coupler.io for real-time SEO data synchronization into Google Sheets.
    - Implement Looker Studio or DataBox dashboards for client SEO performance.
    - Integrate Jasper/Writesonic for scalable AI-driven content creation.

  ai_integration_roadmap:
    - Prioritize Prefect or n8n for creating real-time automation monitoring dashboards.
    - Deploy Hookdeck or Pipedream immediately to handle webhook reliability and orchestration.
    - Accelerate development of self_repair.py to proactively fix broken configs.

  recurring_pitfall_management:
    - Centralized credential management via automated .env synchronization.
    - Automate scheduled log cleanup with Healthchecks.io integration for monitoring.
    - Utilize Sentry for proactive error and authentication failure monitoring.

  ai_assistant_explicit_directives:
    - Proactively suggest automation whenever manual data tasks appear.
    - Flag recurring authentication and environmental errors immediately with recommended solutions.
    - Emphasize low-code/no-code tools (n8n, Pipedream) to enhance ease of use and workflow clarity.

  expanded_tool_integration:
    - Immediate deployment of ScrapeOps for scraping observability.
    - Deep integration of Notion or Todoist for personal productivity management.
    - Immediate adoption of Sentry for comprehensive error tracking and diagnostics.
automation_setup:
  monitoring_tools:
    sentry:
      status: ✅ Confirmed working (2025-04-20)
      setup_notes: DSN configured, error tracking enabled.
    healthchecks_io:
      status: ✅ Confirmed working (2025-04-20)
      ping_url: https://hc-ping.com/f198768f-d8f6-4e7c-801a-857d1cba1d28
      setup_notes: Initial test successful, integrated into scripts.
  git_auto_commit_script:
    status: ⚠️ Updated version integrated with Sentry & Healthchecks.io
    last_update: 2025-04-20
    notes: Enhanced script in use (auto_git_commit.py) with monitoring integrations.
  productivity_hub:

    notion_url: "Automation HQ – https://www.notion.so/Automation-HQ-1dcf32d35f398005a309c8eeb2862418"

    todoist:
      status: ✅ Installed on ASUS, online account configured (2025-04-20)


bar_directory_recon.project_layout

project_layout:
  universal_recon:
    analytics:
      - audit_score_matrix_generator.py
      - domain_anomaly_flagger.py
      - full_report_generator.py
      ...
    core:
      - batch_site_runner.py
      - config_loader.py
      ...
    validators:
      - bar_number_format_validator.py
      - fieldmap_domain_linter.py
      ...
    plugins:
      - ai_template_indexer.py
      - form_autofill.py
      ...
    utils:
      - field_ranker.py
      - snapshot_manager.py
      ...
    config:
      - plugin_registry.json
      - multisite_config.json
    main_script: universal_recon/main.py
    test_scripts:
      - run_phase_21b_analysis.py


current_phase:
  label: "Phase 23 – Prefect Integration + Plugin Diff"
  status: in progress
  next_actions:
    - Register Prefect flows for plugin_diff and validator_report scripts
    - Add motion task sync to all phase-critical flows
    - Set up Prefect dashboard logging and flow state checks
  dependencies:
    - Sentry (already active)
    - Healthchecks.io (already active)
    - GitHub Copilot Agent in VS Code (for future auto-correction tasks)
  goal: "Fully automate analytics sweeps and plugin difference reporting across target sites"

