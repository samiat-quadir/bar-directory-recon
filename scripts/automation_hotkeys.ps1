# Universal Runner Hotkeys - PowerShell Module
# ============================================
# 
# This PowerShell module provides hotkey functions that can be imported
# into your PowerShell profile for quick access to automation features.

# Function to set up automation hotkeys
function Initialize-AutomationHotkeys {
    Write-Host "üî• Setting up Universal Runner hotkeys..." -ForegroundColor Cyan
    
    # Define hotkey functions
    function global:ur-quick { 
        param([string]$Site)
        if (-not $Site) {
            $Site = Read-Host "Enter site URL"
        }
        & "$PSScriptRoot\RunAutomation.bat" quick $Site
    }
    
    function global:ur-full { 
        & "$PSScriptRoot\RunAutomation.bat" full
    }
    
    function global:ur-monitor { 
        & "$PSScriptRoot\RunAutomation.bat" monitor
    }
    
    function global:ur-schedule { 
        & "$PSScriptRoot\RunAutomation.bat" schedule
    }
    
    function global:ur-status { 
        & "$PSScriptRoot\RunAutomation.bat" status
    }
    
    function global:ur-dashboard { 
        & "$PSScriptRoot\RunAutomation.bat" dashboard
        $dashboardPath = Join-Path $PSScriptRoot "output\dashboard.html"
        if (Test-Path $dashboardPath) {
            $open = Read-Host "Open dashboard in browser? (y/n)"
            if ($open -eq 'y' -or $open -eq 'Y') {
                Start-Process $dashboardPath
            }
        }
    }
    
    function global:ur-test { 
        & "$PSScriptRoot\RunAutomation.bat" test
    }
    
    function global:ur-validate { 
        & "$PSScriptRoot\RunAutomation.bat" validate
    }
    
    function global:ur-setup { 
        & "$PSScriptRoot\RunAutomation.bat" setup
    }
    
    function global:ur-help {
        Write-Host @"

üîç Universal Runner Hotkeys - Quick Reference
============================================

Available Hotkeys:
  ur-quick [site]    - Quick pipeline run (prompts for site if not provided)
  ur-full           - Run full pipeline for all sites
  ur-monitor        - Start input directory monitoring
  ur-schedule       - Start automation scheduler
  ur-status         - Show system status
  ur-dashboard      - Generate and optionally open dashboard
  ur-test           - Test notifications
  ur-validate       - Validate system health
  ur-setup          - Setup environment
  ur-help           - Show this help

Examples:
  ur-quick example-bar.com
  ur-full
  ur-dashboard

Tip: Add these to your PowerShell profile for persistent access!

"@ -ForegroundColor Green
    }
    
    Write-Host "‚úÖ Hotkeys installed! Type 'ur-help' for quick reference." -ForegroundColor Green
}

# Function to add hotkeys to PowerShell profile
function Install-AutomationProfile {
    Write-Host "üìù Installing automation hotkeys to PowerShell profile..." -ForegroundColor Cyan
    
    $profilePath = $PROFILE
    $automationScript = @"

# Universal Runner Automation Hotkeys
# Auto-generated by Install-AutomationProfile
if (Test-Path "$PSScriptRoot\AutomationHotkeys.ps1") {
    . "$PSScriptRoot\AutomationHotkeys.ps1"
    Initialize-AutomationHotkeys
}

"@
    
    if (Test-Path $profilePath) {
        $existingContent = Get-Content $profilePath -Raw
        if ($existingContent -notlike "*Universal Runner Automation Hotkeys*") {
            Add-Content -Path $profilePath -Value $automationScript
            Write-Host "‚úÖ Hotkeys added to PowerShell profile!" -ForegroundColor Green
        } else {
            Write-Host "‚ÑπÔ∏è Hotkeys already present in profile." -ForegroundColor Yellow
        }
    } else {
        New-Item -Path $profilePath -ItemType File -Force | Out-Null
        Set-Content -Path $profilePath -Value $automationScript
        Write-Host "‚úÖ Created PowerShell profile with hotkeys!" -ForegroundColor Green
    }
    
    Write-Host "Restart PowerShell or run '. `$PROFILE' to activate hotkeys." -ForegroundColor Cyan
}

# Function to create desktop shortcuts
function New-AutomationShortcuts {
    Write-Host "üñ•Ô∏è Creating desktop shortcuts..." -ForegroundColor Cyan
    
    $desktopPath = [Environment]::GetFolderPath("Desktop")
    $scriptDir = $PSScriptRoot
    
    # Create VBS script for silent execution
    $vbsContent = @"
Set WshShell = CreateObject("WScript.Shell")
WshShell.Run chr(34) & "$scriptDir\RunAutomation.bat" & Chr(34) & " menu", 0
Set WshShell = Nothing
"@
    
    $vbsPath = Join-Path $scriptDir "RunAutomation_Silent.vbs"
    Set-Content -Path $vbsPath -Value $vbsContent
    
    # Create shortcut
    $shortcutPath = Join-Path $desktopPath "Universal Runner.lnk"
    $WshShell = New-Object -comObject WScript.Shell
    $Shortcut = $WshShell.CreateShortcut($shortcutPath)
    $Shortcut.TargetPath = Join-Path $scriptDir "RunAutomation.bat"
    $Shortcut.Arguments = "menu"
    $Shortcut.WorkingDirectory = $scriptDir
    $Shortcut.Description = "Universal Project Runner - Phase 3 Automation"
    $Shortcut.Save()
    
    Write-Host "‚úÖ Desktop shortcut created: Universal Runner.lnk" -ForegroundColor Green
}

# Function to check automation status
function Get-AutomationStatus {
    Write-Host "üìä Checking automation status..." -ForegroundColor Cyan
    
    $logFile = Join-Path $PSScriptRoot "logs\automation\universal_runner.log"
    $configFile = Join-Path $PSScriptRoot "automation\config.yaml"
    $dashboardFile = Join-Path $PSScriptRoot "output\dashboard.html"
    
    Write-Host "`nüîç System Status:" -ForegroundColor Yellow
    
    # Check configuration
    if (Test-Path $configFile) {
        Write-Host "  ‚úÖ Configuration file exists" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå Configuration file missing" -ForegroundColor Red
    }
    
    # Check logs
    if (Test-Path $logFile) {
        $logSize = (Get-Item $logFile).Length
        Write-Host "  ‚úÖ Log file exists ($([math]::Round($logSize/1KB, 2)) KB)" -ForegroundColor Green
        
        # Show recent activity
        $recentLogs = Get-Content $logFile -Tail 5 -ErrorAction SilentlyContinue
        if ($recentLogs) {
            Write-Host "`nüìã Recent Activity (last 5 entries):" -ForegroundColor Yellow
            $recentLogs | ForEach-Object { Write-Host "    $_" -ForegroundColor Gray }
        }
    } else {
        Write-Host "  ‚ö†Ô∏è No log file found" -ForegroundColor Yellow
    }
    
    # Check dashboard
    if (Test-Path $dashboardFile) {
        $dashboardAge = (Get-Date) - (Get-Item $dashboardFile).LastWriteTime
        Write-Host "  ‚úÖ Dashboard exists (updated $([math]::Round($dashboardAge.TotalHours, 1)) hours ago)" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö†Ô∏è Dashboard not generated yet" -ForegroundColor Yellow
    }
    
    # Check Python environment
    try {
        $pythonVersion = python --version 2>&1
        Write-Host "  ‚úÖ Python available: $pythonVersion" -ForegroundColor Green
    } catch {
        Write-Host "  ‚ùå Python not available in PATH" -ForegroundColor Red
    }
    
    Write-Host ""
}

# Function to show automation menu
function Show-AutomationMenu {
    while ($true) {
        Clear-Host
        Write-Host @"

üîç UNIVERSAL PROJECT RUNNER - POWERSHELL CONTROL PANEL
====================================================

  [1] Quick Run               [6] Generate Dashboard
  [2] Full Pipeline           [7] Test Notifications  
  [3] Monitor Input           [8] Validate System
  [4] Start Scheduler         [9] Setup Environment
  [5] Show Status             [10] Install Hotkeys

  [H] Help                    [Q] Quit

"@ -ForegroundColor Cyan
        
        $choice = Read-Host "Select option"
        
        switch ($choice.ToUpper()) {
            "1" { 
                $site = Read-Host "Enter site URL"
                if ($site) { ur-quick $site }
            }
            "2" { ur-full }
            "3" { ur-monitor }
            "4" { ur-schedule }
            "5" { ur-status }
            "6" { ur-dashboard }
            "7" { ur-test }
            "8" { ur-validate }
            "9" { ur-setup }
            "10" { Install-AutomationProfile }
            "H" { ur-help; Read-Host "Press Enter to continue" }
            "Q" { return }
            default { 
                Write-Host "Invalid option. Press Enter to continue..." -ForegroundColor Red
                Read-Host
            }
        }
        
        if ($choice -ne "H") {
            Write-Host "`nPress Enter to continue..." -ForegroundColor Gray
            Read-Host
        }
    }
}

# Export functions for module use
Export-ModuleMember -Function Initialize-AutomationHotkeys, Install-AutomationProfile, New-AutomationShortcuts, Get-AutomationStatus, Show-AutomationMenu

# If script is run directly, initialize hotkeys
if ($MyInvocation.InvocationName -eq $MyInvocation.MyCommand.Name) {
    Initialize-AutomationHotkeys
}
