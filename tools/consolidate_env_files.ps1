
# Description: Merges .env files from different devices while preserving environment-specific settings
# Usage: ./consolidate_env_files.ps1 -OutputPath "path/to/output/.env" -DeviceName "Work"

param (
    [string]$OutputPath = ".env",
    [string]$DeviceName = $env:COMPUTERNAME,
    [switch]$Backup = $true,
    [switch]$WhatIf = $false
)

# Set up logging
function Write-Log {
    param (
        [string]$Message,
        [ValidateSet("INFO", "WARNING", "ERROR", "SUCCESS")]
        [string]$Level = "INFO"
    )

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $formattedMessage = "[$timestamp] [$Level] $Message"

    # Color-code console output
    switch ($Level) {
        "INFO" { Write-Host $formattedMessage }
        "WARNING" { Write-Host $formattedMessage -ForegroundColor Yellow }
        "ERROR" { Write-Host $formattedMessage -ForegroundColor Red }
        "SUCCESS" { Write-Host $formattedMessage -ForegroundColor Green }
    }
}

# Check if running in preview mode
if ($WhatIf) {
    Write-Log "Running in PREVIEW mode. No changes will be made." -Level "WARNING"
}

# Find all .env files in the current directory
$envFiles = Get-ChildItem -Path (Get-Location) -Filter ".env*" -File | Where-Object { $_.Name -ne $OutputPath }

if ($envFiles.Count -eq 0) {
    Write-Log "No .env files found in current directory." -Level "ERROR"
    exit 1
}

Write-Log "Found $($envFiles.Count) .env files to process"

# Initialize a hashtable to store the consolidated environment variables
$envVars = @{}
$deviceSpecificVars = @{}

# Process each .env file
foreach ($file in $envFiles) {
    Write-Log "Processing $($file.Name)..."

    # Extract device name from filename if present (.env.device)
    $fileDevice = if ($file.Name -match "\.env\.(.+)$") { $matches[1] } else { "common" }

    # Create a hashtable for device-specific variables if it doesn't exist
    if (-not $deviceSpecificVars.ContainsKey($fileDevice)) {
        $deviceSpecificVars[$fileDevice] = @{}
    }

    # Read and process each line
    Get-Content $file.FullName | ForEach-Object {
        $line = $_.Trim()

        # Skip empty lines and comments
        if ([string]::IsNullOrWhiteSpace($line) -or $line.StartsWith("#")) {
            return
        }

        # Match variable definitions (KEY=VALUE)
        if ($line -match "^([^=]+)=(.*)$") {
            $key = $matches[1].Trim()
            $value = $matches[2].Trim()

            # Check if already exists with a different value
            if ($envVars.ContainsKey($key) -and $envVars[$key] -ne $value) {
                Write-Log "Different values for '$key' found:" -Level "WARNING"
                Write-Log "  Previous: $($envVars[$key])" -Level "WARNING"
                Write-Log "  New ($fileDevice): $value" -Level "WARNING"
            }

            # Store in both the consolidated list and the device-specific list
            $envVars[$key] = $value
            $deviceSpecificVars[$fileDevice][$key] = $value
        }
    }
}

# If requested, create a backup of the existing .env file
if ($Backup -and (Test-Path $OutputPath) -and -not $WhatIf) {
    $backupPath = "$OutputPath.backup.$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    Copy-Item -Path $OutputPath -Destination $backupPath
    Write-Log "Created backup of existing .env file at $backupPath" -Level "SUCCESS"
}

# Create the consolidated .env file
if (-not $WhatIf) {
    $output = @()

    # Add header
    $output += "# Consolidated .env file"
    $output += "# Generated by consolidate_env_files.ps1 on $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    $output += "# Current device: $DeviceName"
    $output += ""

    # Add device-specific comment for current device
    $output += "# ===== DEVICE-SPECIFIC CONFIGURATION FOR: $DeviceName ====="
    $output += ""

    # Get keys from current device first (if available)
    $currentDeviceKeys = @()
    $currentDeviceSpecific = $null

    if ($deviceSpecificVars.ContainsKey($DeviceName.ToLower())) {
        $currentDeviceSpecific = $deviceSpecificVars[$DeviceName.ToLower()]
        $currentDeviceKeys = $currentDeviceSpecific.Keys
    }

    # Add variables from current device
    foreach ($key in $currentDeviceKeys | Sort-Object) {
        $output += "$key=$($currentDeviceSpecific[$key])"
    }

    $output += ""
    $output += "# ===== COMMON CONFIGURATION ====="
    $output += ""

    # Add all other variables (excluding those already added for the current device)
    foreach ($key in $envVars.Keys | Sort-Object) {
        if (-not $currentDeviceKeys -or -not $currentDeviceKeys.Contains($key)) {
            $output += "$key=$($envVars[$key])"
        }
    }

    # Write the output to the file
    $output | Out-File -FilePath $OutputPath -Encoding utf8

    Write-Log "Successfully created consolidated .env file at $OutputPath" -Level "SUCCESS"
    Write-Log "  Total variables: $($envVars.Count)" -Level "INFO"
    Write-Log "  Device-specific ($DeviceName): $($currentDeviceKeys.Count)" -Level "INFO"
}
else {
    Write-Log "PREVIEW: Would create consolidated .env file at $OutputPath" -Level "WARNING"
    Write-Log "  Total variables: $($envVars.Count)" -Level "INFO"

    $currentDeviceKeys = @()
    if ($deviceSpecificVars.ContainsKey($DeviceName.ToLower())) {
        $currentDeviceKeys = $deviceSpecificVars[$DeviceName.ToLower()].Keys
    }
    Write-Log "  Device-specific ($DeviceName): $($currentDeviceKeys.Count)" -Level "INFO"
}
